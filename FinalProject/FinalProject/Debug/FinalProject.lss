
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000035a  00800100  00002c70  00002d04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000466  0080045a  0080045a  0000305e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000305e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003090  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  000030cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f6d  00000000  00000000  00003254  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000de4  00000000  00000000  000061c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001343  00000000  00000000  00006fa5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d8  00000000  00000000  000082e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000733  00000000  00000000  000087c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001bed  00000000  00000000  00008ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  0000aae0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 0c 	jmp	0x1968	; 0x1968 <__ctors_end>
       4:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <__vector_1>
       8:	0c 94 4c 0d 	jmp	0x1a98	; 0x1a98 <__vector_2>
       c:	0c 94 a3 0d 	jmp	0x1b46	; 0x1b46 <__vector_3>
      10:	0c 94 fa 0d 	jmp	0x1bf4	; 0x1bf4 <__vector_4>
      14:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__bad_interrupt>
      18:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__bad_interrupt>
      1c:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__bad_interrupt>
      20:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__bad_interrupt>
      24:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__bad_interrupt>
      28:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__bad_interrupt>
      2c:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__bad_interrupt>
      30:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__bad_interrupt>
      34:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__bad_interrupt>
      38:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__bad_interrupt>
      3c:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__bad_interrupt>
      40:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__bad_interrupt>
      44:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__bad_interrupt>
      48:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__bad_interrupt>
      4c:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__bad_interrupt>
      50:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__bad_interrupt>
      54:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__bad_interrupt>
      58:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__bad_interrupt>
      5c:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__bad_interrupt>
      60:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__bad_interrupt>
      64:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__bad_interrupt>
      68:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__bad_interrupt>
      6c:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__bad_interrupt>
      70:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__bad_interrupt>
      74:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__bad_interrupt>
      78:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__bad_interrupt>
      7c:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__bad_interrupt>
      80:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__bad_interrupt>
      84:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__bad_interrupt>
      88:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__bad_interrupt>

0000008c <__trampolines_end>:
	...
      9c:	00 00       	nop
      9e:	07 00       	.word	0x0007	; ????
	...
      a8:	04 00       	.word	0x0004	; ????
	...
      b2:	5c 00       	.word	0x005c	; ????
	...
      bc:	7f f0       	brie	.+30     	; 0xdc <__trampolines_end+0x50>
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	00 00       	nop
      c4:	00 01       	movw	r0, r0
      c6:	fe e0       	ldi	r31, 0x0E	; 14
      c8:	00 00       	nop
      ca:	00 00       	nop
      cc:	00 00       	nop
      ce:	00 01       	movw	r0, r0
      d0:	fc 20       	and	r15, r12
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	00 03       	mulsu	r16, r16
      da:	f0 80       	ld	r15, Z
      dc:	00 00       	nop
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	00 0f       	add	r16, r16
      e4:	80 00       	.word	0x0080	; ????
      e6:	00 00       	nop
      e8:	00 00       	nop
      ea:	00 00       	nop
      ec:	00 3f       	cpi	r16, 0xF0	; 240
	...
      f6:	00 7c       	andi	r16, 0xC0	; 192
	...
     100:	01 f0       	breq	.+0      	; 0x102 <__trampolines_end+0x76>
	...
     10a:	07 e0       	ldi	r16, 0x07	; 7
	...
     114:	1f 80       	ldd	r1, Y+7	; 0x07
	...
     11e:	3e 00       	.word	0x003e	; ????
     120:	00 00       	nop
     122:	00 00       	nop
     124:	00 00       	nop
     126:	00 01       	movw	r0, r0
     128:	fc 00       	.word	0x00fc	; ????
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	00 00       	nop
     130:	00 03       	mulsu	r16, r16
     132:	f0 00       	.word	0x00f0	; ????
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 00       	nop
     13a:	00 0f       	add	r16, r16
     13c:	e0 00       	.word	0x00e0	; ????
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	00 01       	movw	r0, r0
     144:	00 3f       	cpi	r16, 0xF0	; 240
     146:	80 00       	.word	0x0080	; ????
     148:	00 00       	nop
     14a:	00 00       	nop
     14c:	00 18       	sub	r0, r0
     14e:	00 fe       	sbrs	r0, 0
     150:	00 00       	nop
     152:	00 00       	nop
     154:	00 00       	nop
     156:	00 1c       	adc	r0, r0
     158:	03 f8       	bld	r0, 3
     15a:	00 00       	nop
     15c:	00 00       	nop
     15e:	00 00       	nop
     160:	00 1c       	adc	r0, r0
     162:	0f f0       	brie	.+2      	; 0x166 <__trampolines_end+0xda>
     164:	00 00       	nop
     166:	00 00       	nop
     168:	00 00       	nop
     16a:	00 3c       	cpi	r16, 0xC0	; 192
     16c:	1f c0       	rjmp	.+62     	; 0x1ac <__trampolines_end+0x120>
     16e:	00 00       	nop
     170:	00 00       	nop
     172:	00 00       	nop
     174:	00 3f       	cpi	r16, 0xF0	; 240
     176:	7f 00       	.word	0x007f	; ????
     178:	00 00       	nop
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	00 ff       	sbrs	r16, 0
     180:	dc 00       	.word	0x00dc	; ????
     182:	00 00       	nop
     184:	00 00       	nop
     186:	00 00       	nop
     188:	03 fd       	sbrc	r16, 3
     18a:	f0 00       	.word	0x00f0	; ????
     18c:	00 00       	nop
     18e:	00 00       	nop
     190:	00 00       	nop
     192:	7f ef       	ldi	r23, 0xFF	; 255
     194:	f0 00       	.word	0x00f0	; ????
     196:	00 00       	nop
     198:	00 00       	nop
     19a:	00 3f       	cpi	r16, 0xF0	; 240
     19c:	ff ff       	.word	0xffff	; ????
     19e:	80 00       	.word	0x0080	; ????
     1a0:	00 00       	nop
     1a2:	00 00       	nop
     1a4:	03 ff       	sbrs	r16, 3
     1a6:	ff ff       	.word	0xffff	; ????
     1a8:	60 00       	.word	0x0060	; ????
     1aa:	00 00       	nop
     1ac:	00 00       	nop
     1ae:	03 ff       	sbrs	r16, 3
     1b0:	ff ff       	.word	0xffff	; ????
     1b2:	f0 40       	sbci	r31, 0x00	; 0
     1b4:	00 00       	nop
     1b6:	00 00       	nop
     1b8:	03 ff       	sbrs	r16, 3
     1ba:	ff ff       	.word	0xffff	; ????
     1bc:	ff 80       	ldd	r15, Y+7	; 0x07
     1be:	00 00       	nop
     1c0:	00 00       	nop
     1c2:	07 ff       	sbrs	r16, 7
     1c4:	ff ff       	.word	0xffff	; ????
     1c6:	ff 80       	ldd	r15, Y+7	; 0x07
     1c8:	00 00       	nop
     1ca:	00 00       	nop
     1cc:	0f ff       	.word	0xff0f	; ????
     1ce:	ff ff       	.word	0xffff	; ????
     1d0:	c0 00       	.word	0x00c0	; ????
     1d2:	00 00       	nop
     1d4:	00 00       	nop
     1d6:	0f ff       	.word	0xff0f	; ????
     1d8:	ff ff       	.word	0xffff	; ????
     1da:	00 00       	nop
     1dc:	00 00       	nop
     1de:	00 00       	nop
     1e0:	0f ff       	.word	0xff0f	; ????
     1e2:	ff fe       	.word	0xfeff	; ????
     1e4:	00 00       	nop
     1e6:	00 00       	nop
     1e8:	00 00       	nop
     1ea:	1f ff       	.word	0xff1f	; ????
     1ec:	fd fe       	.word	0xfefd	; ????
     1ee:	00 00       	nop
     1f0:	00 00       	nop
     1f2:	00 00       	nop
     1f4:	20 00       	.word	0x0020	; ????
     1f6:	7f fc       	.word	0xfc7f	; ????
	...
     200:	3f fc       	.word	0xfc3f	; ????
	...
     20a:	1f f0       	brie	.+6      	; 0x212 <__trampolines_end+0x186>
	...
     214:	3f f0       	brie	.+14     	; 0x224 <__trampolines_end+0x198>
	...
     21e:	3f e0       	ldi	r19, 0x0F	; 15
	...
     228:	3f f0       	brie	.+14     	; 0x238 <__trampolines_end+0x1ac>
	...
     232:	7f c0       	rjmp	.+254    	; 0x332 <hell+0xc6>
	...
     23c:	7c 00       	.word	0x007c	; ????
	...
     246:	f0 00       	.word	0x00f0	; ????
     248:	00 00       	nop
     24a:	00 00       	nop
     24c:	00 00       	nop
     24e:	00 01       	movw	r0, r0
	...
     258:	00 01       	movw	r0, r0
	...

0000026c <hell>:
	...
     288:	00 00 fc 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     298:	00 33 c0 00 00 00 00 00 00 00 00 00 00 00 00 00     .3..............
     2a8:	00 0b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     2b8:	01 8f 00 40 00 00 00 00 00 00 00 00 00 00 00 00     ...@............
     2c8:	08 7c 41 c0 00 00 00 00 00 00 00 00 00 00 00 00     .|A.............
     2d8:	07 ff ff c0 00 00 00 00 00 00 00 00 00 00 00 00     ................
     2e8:	06 7f 13 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     2f8:	07 ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     308:	07 f0 20 00 00 00 00 00 00 00 00 00 00 00 00 00     .. .............
     318:	3f fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ?...............
     328:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03     ................
     338:	fe 00 00 00 00 00 00 00 00 00 00 00 00 00 00 0f     ................
     348:	f8 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7f     ................
     358:	e0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff     ................
	...
     374:	00 00 07 fe 00 00 00 00 00 00 00 00 00 00 00 00     ................
     384:	00 00 1f f0 00 00 00 00 00 00 00 00 00 00 00 00     ................
     394:	00 00 3f e0 00 00 00 00 00 00 00 00 00 00 00 00     ..?.............
     3a4:	00 01 ff 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
     3b4:	00 0f fc 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     3c4:	00 3f f8 00 00 00 00 00 00 00 00 00 00 00 00 00     .?..............
     3d4:	00 ff e0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     3e4:	03 ff 00 00 00 00 00 00 00 00 00 00 00 00 20 00     .............. .
     3f4:	0f fe 00 00 00 00 00 00 00 00 00 00 00 0e c0 00     ................
     404:	7f f8 00 00 00 00 00 00 00 00 00 00 00 16 80 01     ................
     414:	ff e0 00 00 00 00 00 00 00 00 00 00 00 17 00 07     ................
     424:	ff 80 00 00 00 00 00 00 00 00 00 00 00 0f 00 3f     ...............?
     434:	fc 00 00 00 00 00 00 00 00 00 00 00 00 3e 00 7f     .............>..
     444:	f0 00 00 00 00 00 00 00 00 00 00 00 00 7f f9 ff     ................
     454:	c0 00 00 00 00 00 00 00 00 00 00 00 00 bf e7 7f     ................
	...
     470:	01 ff bf ec 00 00 00 00 00 00 00 00 00 00 00 00     ................
     480:	07 fe ff e0 00 00 00 00 00 00 00 00 00 00 00 00     ................
     490:	3f f7 bf c0 00 00 00 00 00 00 00 00 00 00 00 3f     ?..............?
     4a0:	ff 63 fe 80 00 00 00 00 00 00 00 00 00 00 ff ff     .c..............
     4b0:	fe ff fc 00 00 00 00 00 00 00 00 00 00 3f ff ff     .............?..
     4c0:	ff ff e5 00 00 00 00 00 00 00 00 00 00 3f ff ff     .............?..
     4d0:	ff ff eb 80 18 00 00 00 00 00 00 00 00 7f ff ff     ................
     4e0:	ff ff ff e1 a0 00 00 00 00 00 00 00 00 7f ff ff     ................
     4f0:	df ff 7f ff c0 00 00 00 00 00 00 00 00 ff ff f7     ................
     500:	ff ff ff ff 40 00 00 00 00 00 00 00 00 ff ff 5f     ....@.........._
     510:	ff ff ff dc 00 00 00 00 00 00 00 00 01 ff ff bf     ................
     520:	ff bf fe 00 00 00 00 00 00 00 00 00 02 ff ff ff     ................
     530:	f7 ff e8 00 00 00 00 00 00 00 00 00 03 ff ff ff     ................
     540:	ff ff e0 00 00 00 00 00 00 00 00 00 07 ff ff ff     ................
     550:	c7 ff c0 00 00 00 00 00 00 00 00 00 0b ff ff ff     ................
     560:	f7 ff 80 00 00 00 00 00 00 00 00 00 1a 00 00 3f     ...............?
     570:	ff ff 80 00 00 00 00 00 00 00 00 00 00 00 00 0f     ................
     580:	ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 05     ................
     590:	ff fa 00 00 00 00 00 00 00 00 00 00 00 00 00 05     ................
     5a0:	ff f8 00 00 00 00 00 00 00 00 00 00 00 00 00 05     ................
     5b0:	ff f0 00 00 00 00 00 00 00 00 00 00 00 00 00 0b     ................
     5c0:	ef f4 00 00 00 00 00 00 00 00 00 00 00 00 00 0b     ................
     5d0:	ff f4 00 00 00 00 00 00 00 00 00 00 00 00 00 06     ................
     5e0:	ff fc 00 00 00 00 00 00 00 00 00 00 00 00 00 17     ................
     5f0:	ff c0 00 00 00 00 00 00 00 00 00 00 00 00 00 1f     ................
     600:	fc 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2f     .............../
     610:	e0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7e     ...............~
	...
     62c:	00 00 00 50 00 00 00 00 00 00 00 00 00 00 00 00     ...P............
     63c:	00 00 00 c0 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

0000066c <small_keyboard>:
	...
     678:	00 1f ff ff f8 00 00 00 00 00 00 1f ff ff f8 00     ................
     688:	00 00 00 00 00 1f ff ff f8 00 00 00 00 00 00 1f     ................
     698:	ff ff f8 00 00 00 00 00 00 1f ff ff f8 00 00 00     ................
     6a8:	0f ff ff ff ff ff ff ff ff e0 0f ff ff ff ff ff     ................
     6b8:	ff ff ff f0 1f ff ff ff ff ff ff ff ff f0 1f ff     ................
     6c8:	ff ff ff ff ff ff ff f0 1f ff ff ff ff ff ff ff     ................
     6d8:	ff f8 18 00 00 00 00 00 00 00 00 18 38 00 00 00     ............8...
     6e8:	00 00 00 00 00 18 30 00 00 00 00 00 00 00 00 1c     ......0.........
     6f8:	70 00 00 00 00 00 00 00 00 0c 70 00 00 00 00 00     p.........p.....
     708:	00 00 00 1e 7f ff ff ff ff ff ff ff ff fe 7f ff     ................
     718:	ff ff ff ff ff ff ff fe 7f ff ff ff ff ff ff ff     ................
     728:	ff fe 7f ff ff ff ff ff ff ff ff fc 00 00 0f 00     ................
     738:	00 00 01 e0 00 00 00 00 03 c0 00 00 03 c0 00 00     ................
     748:	00 00 00 f0 00 00 1f 00 00 00 00 00 00 3c 00 00     .............<..
     758:	78 00 00 00 00 00 00 1f 00 01 f0 00 00 00 00 00     x...............
     768:	00 03 c0 03 c0 00 00 00 00 00 00 00 f0 1f 00 00     ................
     778:	00 00 00 00 00 00 3c 7c 00 00 00 00 00 00 00 00     ......<|........
     788:	1f f0 00 00 00 00 00 00 00 00 07 e0 00 00 00 00     ................
     798:	00 00 00 00 0f f0 00 00 00 00 00 00 00 00 3c 7c     ..............<|
	...
     7b0:	f8 1e 00 00 00 00 00 00 00 03 c0 07 80 00 00 00     ................
     7c0:	00 00 00 0f 00 00 f0 00 00 00 00 00 c0 3c 00 00     .............<..
     7d0:	78 07 00 00 00 01 c0 78 00 00 1e 07 00 00 00 01     x......x........
     7e0:	c3 e0 00 00 07 87 00 00 00 01 cf 00 00 00 01 f7     ................
     7f0:	00 00 00 01 fe 00 00 00 00 7f 00 00 00 01 f8 00     ................
     800:	00 00 00 1f 00 00 00 01 e0 00 00 00 00 0f 00 00     ................
     810:	00 01 c0 00 00 00 00 03 00 00 00 01 80 00 00 00     ................
     820:	00 03 80 00 00 01 80 00 00 00 00 03 80 00 00 01     ................
     830:	80 00 00 00 00 03 aa 90 00 01 80 00 00 00 00 03     ................
     840:	80 00 00 00 00 00 00 00 00 00 00 00                 ............

0000084c <small_guitar>:
	...
     85c:	00 01 cf 00 00 00 01 f0 00 00 00 00 ff c0 00 00     ................
     86c:	0f f0 00 00 00 00 79 e0 00 00 7e 70 00 00 00 0e     ......y...~p....
     87c:	e0 70 00 01 f3 f0 00 00 00 07 c0 3c 00 01 fe 70     .p.........<...p
     88c:	00 00 00 03 80 1c 00 01 f0 70 00 00 00 0f 00 78     .........p.....x
     89c:	00 01 80 70 00 00 00 1f 81 f8 00 01 83 f0 00 00     ...p............
     8ac:	00 73 c7 8c 00 01 8e f0 00 00 01 c0 ff 80 00 01     .s..............
     8bc:	9c 70 00 00 07 80 79 c0 00 1f 8f e0 00 00 1e 01     .p....y.........
     8cc:	e0 00 00 7f 83 80 00 00 3c 03 c0 00 00 73 80 00     ........<....s..
     8dc:	00 00 f0 0f 00 00 00 7f 00 00 7f 03 c0 3c 00 00     .............<..
     8ec:	00 08 00 07 ff e7 80 78 00 00 00 00 00 1f 00 fe     .......x........
     8fc:	00 e0 00 00 00 00 00 70 00 78 03 80 00 00 00 00     .......p.x......
     90c:	00 e0 00 70 0e 00 00 00 00 00 01 c0 00 38 1e 00     ...p.........8..
     91c:	00 00 00 00 03 80 00 1c 78 00 00 00 00 0f fe 00     ........x.......
     92c:	00 0f f8 00 00 00 00 7e 00 00 00 07 9c 00 00 00     .......~........
     93c:	01 e0 00 03 e0 06 1c 00 00 00 03 c0 00 0f fc 00     ................
     94c:	0e 00 00 00 0f 00 00 18 0e 00 0e 00 00 00 1e 00     ................
     95c:	00 00 07 00 0e 00 00 00 1c 00 00 70 07 00 0c 00     ...........p....
     96c:	00 00 38 00 00 70 07 00 1c 00 00 00 38 00 00 38     ..8..p......8..8
     97c:	0f 00 38 00 00 00 38 00 00 1f fe 00 70 00 00 00     ..8...8.....p...
     98c:	38 00 00 07 f8 01 e0 00 00 00 38 00 70 00 00 0f     8.........8.p...
     99c:	80 00 00 00 38 00 3c 00 00 3c 00 00 c0 00 18 00     ....8.<..<......
     9ac:	0e 00 00 70 00 07 e0 00 1c 00 06 00 00 70 00 07     ...p.........p..
     9bc:	80 00 0e 00 00 c0 00 70 00 06 00 00 07 00 00 40     .......p.......@
     9cc:	00 70 00 06 00 00 03 80 00 00 00 60 00 06 00 00     .p.........`....
     9dc:	01 c0 00 00 00 60 00 7e 00 00 00 f0 00 00 00 c0     .....`.~........
     9ec:	01 fe 00 00 00 3c 00 00 03 c0 01 ce 00 00 00 1f     .....<..........
     9fc:	00 00 07 00 01 fe 00 00 00 07 e0 00 1e 00 00 78     ...............x
     a0c:	00 00 00 00 fc 00 f8 00 00 00 00 00 00 00 03 ff     ................
	...

00000a2c <small_drum>:
	...
     a40:	1e 00 00 00 00 00 00 00 03 80 11 e0 00 00 00 00     ................
     a50:	00 00 3c c0 1c 78 00 00 00 00 00 01 e1 c0 03 c7     ..<..x..........
     a60:	80 00 00 00 00 1e 1e 00 00 1e 1e 00 00 00 03 c3     ................
     a70:	c0 00 00 01 e3 c0 00 00 3c 3c 00 00 00 00 38 78     ........<<....8x
     a80:	00 01 e1 e0 00 00 00 00 07 87 80 0f 1e 00 00 00     ................
     a90:	00 00 00 1c 3f c3 c0 00 00 00 00 00 00 7f fe 3f     ....?..........?
     aa0:	f0 00 00 00 00 00 1f e1 e1 fc 3f 80 00 00 00 00     ..........?.....
     ab0:	ff 0f 0f 8f 03 f8 00 00 00 07 38 03 c0 3c 00 c7     ..........8..<..
     ac0:	00 00 00 0c 60 1e 00 03 c0 61 80 00 00 18 60 30     ....`....a....`0
     ad0:	00 00 40 60 80 00 00 1c 20 60 00 00 30 60 c0 00     ..@`.... `..0`..
     ae0:	00 1e 1f 00 00 00 0f c3 c0 00 00 19 80 00 00 00     ................
     af0:	00 1e c0 00 00 18 78 00 00 00 00 f8 80 00 00 18     ......x.........
     b00:	0f c0 00 00 3f c0 80 00 00 1e 00 00 ff c0 00 03     ....?...........
     b10:	80 00 00 1b c0 00 00 00 00 1e 80 00 00 1b 7c 00     ..............|.
     b20:	00 00 01 fe 80 00 00 1b 1f f0 00 00 ff c6 80 00     ................
     b30:	00 1b 18 0c 07 01 c0 c6 80 00 00 1b 18 08 06 01     ................
     b40:	80 c6 80 00 00 1b 18 08 06 01 80 c6 80 00 00 1b     ................
     b50:	18 08 06 01 80 c6 80 00 00 1b 18 08 06 01 80 c6     ................
     b60:	80 00 00 1b 18 08 06 01 80 c6 80 00 00 1b 18 08     ................
     b70:	06 01 80 c6 80 00 00 1b 18 08 06 01 80 c6 80 00     ................
     b80:	00 1b 18 08 06 01 80 c6 80 00 00 1b 18 08 06 01     ................
     b90:	80 c6 80 00 00 1b 18 08 06 01 80 c6 80 00 00 1b     ................
     ba0:	18 08 06 01 80 c6 80 00 00 1b 18 08 06 01 80 c6     ................
     bb0:	80 00 00 1b 18 08 06 01 80 c6 80 00 00 1b 18 08     ................
     bc0:	06 01 80 c6 80 00 00 0f 18 08 06 01 80 c6 80 00     ................
     bd0:	00 07 18 08 06 01 80 cf 00 00 00 01 f8 08 06 01     ................
     be0:	80 fc 00 00 00 00 3f 88 06 01 8f e0 00 00 00 00     ......?.........
     bf0:	03 ff ff ff fc 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000c0c <keyboard>:
	...
     c20:	7f ff ff ff fe 00 00 00 00 00 00 00 00 00 00 7f     ................
     c30:	ff ff ff fe 00 00 00 00 00 00 00 00 00 00 7f ff     ................
     c40:	ff ff fe 00 00 00 00 00 00 00 00 00 00 7f ff ff     ................
     c50:	ff fe 00 00 00 00 00 00 00 00 00 00 7f ff ff ff     ................
     c60:	fe 00 00 00 00 00 00 00 00 00 00 7f ff ff ff fe     ................
     c70:	00 00 00 00 00 01 ff ff ff ff ff ff ff ff ff ff     ................
     c80:	ff ff ff 00 03 ff ff ff ff ff ff ff ff ff ff ff     ................
     c90:	ff ff 80 03 ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ca0:	ff c0 07 ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     cb0:	c0 07 ff ff ff ff ff ff ff ff ff ff ff ff ff c0     ................
     cc0:	07 ff ff ff ff ff ff ff ff ff ff ff ff ff e0 0f     ................
     cd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff e0 0e 00     ................
	...
     cec:	f0 1e 00 00 00 00 00 00 00 00 00 00 00 00 00 f0     ................
     cfc:	1e 00 00 00 00 00 00 00 00 00 00 00 00 00 78 3c     ..............x<
	...
     d18:	00 78 3c 00 00 00 00 00 00 00 00 00 00 00 00 00     .x<.............
     d28:	38 7c 00 00 00 00 00 00 00 00 00 00 00 00 00 7c     8|.............|
     d38:	7f ff ff ff ff ff ff ff ff ff ff ff ff ff fc 7f     ................
     d48:	ff ff ff ff ff ff ff ff ff ff ff ff ff fe 7f ff     ................
     d58:	ff ff ff ff ff ff ff ff ff ff ff ff fe 7f ff ff     ................
     d68:	ff ff ff ff ff ff ff ff ff ff ff fc 3f ff ff ff     ............?...
     d78:	ff ff ff ff ff ff ff ff ff ff f8 00 00 00 03 f0     ................
     d88:	00 00 00 00 00 1f 80 00 00 00 00 00 00 00 fe 00     ................
     d98:	00 00 00 00 7e 00 00 00 00 00 00 00 00 1f 80 00     ....~...........
     da8:	00 00 03 f8 00 00 00 00 00 00 00 00 07 e0 00 00     ................
     db8:	00 0f e0 00 00 00 00 00 00 00 00 01 f8 00 00 00     ................
     dc8:	3f 00 00 00 00 00 00 00 00 00 00 7f 00 00 01 fc     ?...............
	...
     de0:	00 00 0f c0 00 03 f0 00 00 00 00 00 00 00 00 00     ................
     df0:	00 01 f8 00 1f 80 00 00 00 00 00 00 00 00 00 00     ................
     e00:	00 7e 00 fe 00 00 00 00 00 00 00 00 00 00 00 00     .~..............
     e10:	1f 83 f8 00 00 00 00 00 00 00 00 00 00 00 00 07     ................
     e20:	ff c0 00 00 00 00 00 00 00 00 00 00 00 00 01 ff     ................
	...
     e3c:	00 01 ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     e4c:	07 ef e0 00 00 00 00 00 00 00 00 00 00 00 00 1f     ................
     e5c:	83 f8 00 00 00 00 00 00 00 00 00 00 00 00 fe 00     ................
     e6c:	7e 00 00 00 00 00 00 00 00 00 00 00 03 f0 00 1f     ~...............
     e7c:	80 00 00 00 00 00 00 00 00 00 00 0f c0 00 07 f0     ................
	...
     e94:	00 00 7f 00 00 00 fc 00 00 00 00 00 00 00 00 e0     ................
     ea4:	01 f8 00 00 00 3f 00 0f 00 00 00 00 00 01 e0 07     .....?..........
     eb4:	e0 00 00 00 0f e0 0f 00 00 00 00 00 01 e0 3f 80     ..............?.
     ec4:	00 00 00 01 f8 0f 00 00 00 00 00 01 e0 fc 00 00     ................
     ed4:	00 00 00 7e 0f 00 00 00 00 00 01 e3 f0 00 00 00     ...~............
     ee4:	00 00 1f cf 00 00 00 00 00 01 ff c0 00 00 00 00     ................
     ef4:	00 03 ff 00 00 00 00 00 01 fe 00 00 00 00 00 00     ................
     f04:	00 ff 00 00 00 00 00 01 f8 00 00 00 00 00 00 00     ................
     f14:	3f 00 00 00 00 00 01 e0 00 00 00 00 00 00 00 0f     ?...............
     f24:	00 00 00 00 00 01 e0 00 00 00 00 00 00 00 07 80     ................
     f34:	00 00 00 00 01 c0 00 00 00 00 00 00 00 07 80 00     ................
     f44:	00 00 00 01 c0 00 00 00 00 00 00 00 07 80 00 00     ................
     f54:	00 00 03 c0 00 00 00 00 00 00 00 07 92 4c 90 00     .............L..
     f64:	00 03 c0 00 00 00 00 00 00 00 07 92 4c d0 00 00     ............L...
     f74:	03 c0 00 00 00 00 00 00 00 07 80 00 00 00 00 00     ................
	...

00000f90 <guitar>:
	...
     fa8:	00 00 01 c3 e0 00 00 00 00 00 03 80 00 00 00 00     ................
     fb8:	00 01 ff f8 00 00 00 00 00 3f c0 00 00 00 00 00     .........?......
     fc8:	00 7f 7e 00 00 00 00 03 ff c0 00 00 00 00 00 00     ..~.............
     fd8:	3e 1f 00 00 00 00 7f c3 c0 00 00 00 00 00 7e f8     >.............~.
     fe8:	07 c0 00 00 03 fc 3f c0 00 00 00 00 00 1f f0 01     ......?.........
     ff8:	f0 00 00 03 c3 ff c0 00 00 00 00 00 07 c0 00 7c     ...............|
    1008:	00 00 03 ff c3 c0 00 00 00 00 00 0f 80 00 f8 00     ................
    1018:	00 03 fc 03 c0 00 00 00 00 00 3e 00 07 f0 00 00     ..........>.....
    1028:	03 c0 03 c0 00 00 00 00 00 ff 80 1f f0 00 00 03     ................
    1038:	80 7f c0 00 00 00 00 03 e7 e0 fc 78 00 00 03 83     ...........x....
    1048:	ff c0 00 00 00 00 0f 81 ff f8 38 00 00 03 87 c7     ..........8.....
    1058:	c0 00 00 00 00 3e 00 7f fc 00 00 00 03 87 87 c0     .....>..........
    1068:	00 00 00 01 f8 00 7e 1e 00 00 00 ff 83 ff 80 00     ......~.........
    1078:	00 00 07 e0 01 f8 00 00 00 03 ff 80 fc 00 00 00     ................
    1088:	00 0f 80 07 e0 00 00 00 07 87 80 00 00 00 00 00     ................
    1098:	7e 00 1f 80 00 00 00 07 cf 80 00 00 00 00 00 f8     ~...............
    10a8:	00 7e 00 00 00 00 03 ff 00 00 00 7f f0 07 e0 01     .~..............
    10b8:	f8 00 00 00 00 00 30 00 00 0f ff ff 9f 80 07 e0     ......0.........
	...
    10d0:	7f 80 1f fe 00 0f 80 00 00 00 00 00 00 00 01 f8     ................
    10e0:	00 01 f8 00 3e 00 00 00 00 00 00 00 00 07 c0 00     ....>...........
    10f0:	07 e0 00 f8 00 00 00 00 00 00 00 00 0f 00 00 07     ................
    1100:	c0 03 e0 00 00 00 00 00 00 00 00 1e 00 00 01 f0     ................
    1110:	0f c0 00 00 00 00 00 00 00 00 7c 00 00 00 f8 3f     ..........|....?
	...
    1128:	ff f8 00 00 00 3c fe 00 00 00 00 00 00 00 7f ff     .....<..........
    1138:	c0 00 00 00 3f ff 00 00 00 00 00 00 07 fe 00 00     ....?...........
    1148:	00 00 00 1f c7 80 00 00 00 00 00 1f 80 00 00 07     ................
    1158:	f0 00 1e 07 80 00 00 00 00 00 7e 00 00 00 3f ff     ..........~...?.
    1168:	00 00 03 c0 00 00 00 00 01 f0 00 00 00 f8 07 c0     ................
    1178:	00 03 c0 00 00 00 00 03 e0 00 00 00 e0 01 e0 00     ................
    1188:	03 c0 00 00 00 00 07 c0 00 00 00 00 00 f0 00 03     ................
    1198:	c0 00 00 00 00 0f 80 00 00 03 c0 00 f0 00 03 80     ................
    11a8:	00 00 00 00 0f 00 00 00 03 c0 00 f0 00 07 80 00     ................
    11b8:	00 00 00 1e 00 00 00 03 e0 00 f0 00 0f 00 00 00     ................
    11c8:	00 00 1e 00 00 00 01 f0 03 e0 00 1e 00 00 00 00     ................
    11d8:	00 1e 00 00 00 00 7f ff c0 00 7c 00 00 00 00 00     ..........|.....
    11e8:	1e 00 00 00 00 1f fe 00 03 f0 00 00 00 00 00 1e     ................
    11f8:	00 00 78 00 00 00 00 1f c0 00 00 00 00 00 1e 00     ..x.............
    1208:	00 3e 00 00 00 00 fe 00 00 00 00 00 00 0f 00 00     .>..............
    1218:	0f 80 00 00 01 f0 00 00 00 f0 00 00 0f 00 00 03     ................
    1228:	e0 00 00 03 c0 00 00 0f f0 00 00 07 80 00 00 e0     ................
    1238:	00 00 03 c0 00 00 1f 80 00 00 03 c0 00 00 1e 00     ................
    1248:	00 03 c0 00 00 1e 00 00 00 01 e0 00 00 0f 80 00     ................
    1258:	03 c0 00 00 1e 00 00 00 00 f0 00 00 02 00 00 03     ................
    1268:	c0 00 00 1e 00 00 00 00 78 00 00 00 00 00 07 80     ........x.......
    1278:	00 00 1e 00 00 00 00 3e 00 00 00 00 00 07 80 00     .......>........
    1288:	03 fe 00 00 00 00 0f 80 00 00 00 00 0f 00 00 1f     ................
    1298:	fe 00 00 00 00 03 e0 00 00 00 00 3e 00 00 3e 3e     ...........>..>>
    12a8:	00 00 00 00 01 f8 00 00 00 00 7c 00 00 3c 3e 00     ..........|..<>.
    12b8:	00 00 00 00 7f 00 00 00 01 f0 00 00 1f fc 00 00     ................
    12c8:	00 00 00 0f f0 00 00 0f c0 00 00 07 e0 00 00 00     ................
    12d8:	00 00 01 ff 80 00 ff 00 00 00 00 00 00 00 00 00     ................
    12e8:	00 00 1f ff ff f8 00 00 00 00 00 00 00 00 00 00     ................
    12f8:	00 00 3f fe 00 00 00 00 00 00 00 00 00 00 00 00     ..?.............
	...

00001314 <drum>:
	...
    1330:	00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1340:	00 0f e0 00 00 00 00 00 00 00 00 00 00 00 fc 00     ................
    1350:	0c 3f 00 00 00 00 00 00 00 00 00 00 1f 86 00 0f     .?..............
    1360:	83 f0 00 00 00 00 00 00 00 00 03 f0 3e 00 00 fc     ............>...
    1370:	1f 80 00 00 00 00 00 00 00 7e 07 e0 00 00 0f c0     .........~......
    1380:	fc 00 00 00 00 00 00 07 e0 fc 00 00 00 00 7e 07     ..............~.
    1390:	e0 00 00 00 00 00 fc 0f c0 00 00 00 00 03 f0 7e     ...............~
    13a0:	00 00 00 00 1f 81 f8 00 00 00 00 00 00 1f 03 f0     ................
    13b0:	00 00 01 f8 3f 00 00 00 00 00 00 00 01 f8 1f 80     ....?...........
    13c0:	00 3f 07 e0 00 00 00 00 00 00 00 00 0f c1 f8 07     .?..............
    13d0:	e0 7e 00 00 00 00 00 00 00 00 00 00 7c 0f fe 0f     .~..........|...
    13e0:	c0 00 00 00 00 00 00 00 00 00 07 ff ff c1 ff fc     ................
	...
    13f8:	07 ff 81 f8 1f f0 1f fc 00 00 00 00 00 00 00 ff     ................
    1408:	e0 3f 03 f8 3f 00 3f e0 00 00 00 00 00 07 e7 ff     .?..?.?.........
    1418:	f0 7e 1f 81 ff f8 7c 00 00 00 00 00 1e 1e 00 07     .~....|.........
    1428:	c0 00 fc 00 0e 0f 00 00 00 00 00 38 38 00 fc 00     ...........88...
    1438:	00 07 e0 03 03 c0 00 00 00 00 70 30 01 c0 00 00     ..........p0....
    1448:	00 60 03 80 c0 00 00 00 00 70 30 03 80 00 00 00     .`.......p0.....
    1458:	38 03 80 c0 00 00 00 00 78 1c 1e 00 00 00 00 1f     8.......x.......
    1468:	07 01 e0 00 00 00 00 7e 07 f0 00 00 00 00 03 fc     .......~........
    1478:	0f e0 00 00 00 00 63 c0 00 00 00 00 00 00 00 7c     ......c........|
    1488:	e0 00 00 00 00 60 7e 00 00 00 00 00 00 0f e0 c0     .....`~.........
    1498:	00 00 00 00 60 07 fe 00 00 00 00 0f fe 00 c0 00     ....`...........
    14a8:	00 00 00 70 00 1f ff ff ff ff ff 00 01 c0 00 00     ...p............
    14b8:	00 00 7e 00 00 00 7f fe 00 00 00 0f c0 00 00 00     ..~.............
    14c8:	00 67 e0 00 00 00 00 00 00 00 fc c0 00 00 00 00     .g..............
    14d8:	67 7f 80 00 00 00 00 00 1f fc c0 00 00 00 00 67     g..............g
    14e8:	07 ff c0 00 00 00 7f fe 0c c0 00 00 00 00 67 06     ..............g.
    14f8:	03 ff ff ff ff fc 0e 0c c0 00 00 00 00 67 06 00     .............g..
    1508:	30 00 e0 01 c0 0e 0c c0 00 00 00 00 67 06 00 30     0...........g..0
    1518:	00 e0 01 c0 0e 0c c0 00 00 00 00 67 06 00 30 00     ...........g..0.
    1528:	e0 01 c0 0e 0c c0 00 00 00 00 67 06 00 30 00 e0     ..........g..0..
    1538:	01 c0 0e 0c c0 00 00 00 00 67 06 00 30 00 e0 01     .........g..0...
    1548:	c0 0e 0c c0 00 00 00 00 67 06 00 30 00 e0 01 c0     ........g..0....
    1558:	0e 0c c0 00 00 00 00 67 06 00 30 00 e0 01 c0 0e     .......g..0.....
    1568:	0c c0 00 00 00 00 67 06 00 30 00 e0 01 c0 0e 0c     ......g..0......
    1578:	c0 00 00 00 00 67 06 00 30 00 e0 01 c0 0e 0c c0     .....g..0.......
    1588:	00 00 00 00 67 06 00 30 00 e0 01 c0 0e 0c c0 00     ....g..0........
    1598:	00 00 00 67 06 00 30 00 e0 01 c0 0e 0c c0 00 00     ...g..0.........
    15a8:	00 00 67 06 00 30 00 e0 01 c0 0e 0c c0 00 00 00     ..g..0..........
    15b8:	00 67 06 00 30 00 e0 01 c0 0e 0c c0 00 00 00 00     .g..0...........
    15c8:	67 06 00 30 00 e0 01 c0 0e 0c c0 00 00 00 00 67     g..0...........g
    15d8:	06 00 30 00 e0 01 c0 0e 0c c0 00 00 00 00 67 06     ..0...........g.
    15e8:	00 30 00 e0 01 c0 0e 0c c0 00 00 00 00 67 06 00     .0...........g..
    15f8:	30 00 e0 01 c0 0e 0c c0 00 00 00 00 67 06 00 30     0...........g..0
    1608:	00 e0 01 c0 0e 0c c0 00 00 00 00 77 06 00 30 00     ...........w..0.
    1618:	e0 01 c0 0e 0c c0 00 00 00 00 3f 06 00 30 00 e0     ..........?..0..
    1628:	01 c0 0e 0f 80 00 00 00 00 0f 86 00 30 00 e0 01     ............0...
    1638:	c0 0e 3f 00 00 00 00 00 01 fe 00 30 00 e0 01 c0     ..?........0....
    1648:	0f f8 00 00 00 00 00 00 1f f8 30 00 e0 01 c3 ff     ..........0.....
	...
    1660:	7f ff fe e7 ff ff c0 00 00 00 00 00 00 00 00 00     ................
    1670:	07 ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00001698 <title>:
	...
    16c0:	00 00 00 07 e0 00 00 00 00 00 00 00 00 00 00 00     ................
    16d0:	00 00 1f f0 00 00 00 00 00 00 00 00 00 00 00 00     ................
    16e0:	00 3c 70 00 00 00 00 00 00 00 00 00 00 00 00 00     .<p.............
    16f0:	38 70 00 00 00 00 00 00 00 00 00 00 00 00 00 38     8p.............8
	...
    1708:	00 03 00 00 00 00 78 00 00 00 00 00 00 00 00 00     ......x.........
    1718:	07 00 00 00 00 78 00 00 00 00 00 00 00 00 00 07     .....x..........
    1728:	00 00 00 01 ff 00 00 00 00 00 00 00 00 00 0f 00     ................
    1738:	00 02 03 f0 00 00 00 00 00 00 00 00 00 0f 00 00     ................
    1748:	3f c0 f0 00 00 00 00 00 00 00 00 00 0e 00 00 e1     ?...............
    1758:	e0 f0 00 00 43 80 00 00 00 00 00 0e 00 01 e0 e0     ....C...........
    1768:	e0 00 01 ff f0 00 00 00 00 07 fe 00 01 c0 e1 e0     ................
    1778:	00 01 f8 f8 00 00 00 c0 1e 7c 00 01 c1 e1 e0 00     .........|......
    1788:	03 e0 78 00 00 1f f8 1c 3c 00 01 c7 c3 c0 00 03     ..x.....<.......
    1798:	c0 78 02 38 3c 3c 3c 3c 00 03 c7 cf c0 00 03 c0     .x.8<<<<........
    17a8:	f0 1f f8 38 38 38 3c 1c 03 c3 ff c0 00 03 8f e0     ...888<.........
    17b8:	38 78 38 38 38 78 38 03 c3 83 c0 00 07 9f e0 78     8x888x8........x
    17c8:	78 78 78 38 78 38 01 ff 03 80 00 07 9f f0 70 70     xxx8x8........pp
    17d8:	78 70 78 78 70 00 78 07 80 00 07 00 78 70 70 70     xpxxp.x.....xppp
    17e8:	70 78 ff e0 00 00 07 80 00 07 00 78 f0 f0 f0 f0     px.........x....
    17f8:	ff df 80 00 00 07 80 00 0f 00 78 f0 f0 f0 7f 9f     ..........x.....
    1808:	00 00 00 00 07 00 00 0f ff f8 f0 f1 f0 3e 00 00     .............>..
    1818:	00 00 1c 0f 00 00 0f c1 ff f1 ff e0 00 00 00 00     ................
    1828:	1f fc 0f 00 00 0f c0 ff 7f 3c 00 00 00 00 e0 78     .........<.....x
    1838:	f8 0e 00 00 1f c1 e0 1c 00 00 00 01 c0 e0 f0 78     ...............x
    1848:	00 00 00 1f ff 80 00 00 00 7e 03 c1 e0 e0 78 00     .........~....x.
    1858:	00 00 1c 38 00 00 03 0f cf 03 81 e0 e0 78 00 00     ...8.........x..
    1868:	00 00 00 00 00 07 0f 07 03 81 c1 e0 70 00 00 00     ............p...
    1878:	00 00 00 00 07 0e 07 07 81 c1 c0 70 00 00 00 00     ...........p....
    1888:	00 00 00 0f 1e 0f 07 03 c1 c0 f0 20 00 00 00 00     ........... ....
    1898:	00 00 0e 1c 0f 07 ff c3 c0 e0 60 00 00 00 00 00     ..........`.....
    18a8:	00 0e 3c 0e 7f c3 83 c0 e0 60 00 00 00 00 00 00     ..<......`......
    18b8:	0e 3c 0e 0f 03 83 81 e0 c0 00 00 00 00 00 00 1e     .<..............
    18c8:	38 1e 0e 07 87 81 e1 c0 00 00 00 00 00 00 1c 38     8..............8
    18d8:	1c 1e 07 87 c3 e3 80 00 00 00 00 00 00 1c 78 1c     ..............x.
    18e8:	1e 07 87 fe 7c 00 00 00 00 00 00 00 3c 70 3c 3c     ....|.......<p<<
    18f8:	03 fc f8 00 00 00 00 00 00 00 00 38 70 1c 7c 00     ...........8p.|.
    1908:	e0 00 00 00 00 00 00 00 00 00 38 f0 1f fc 00 00     ..........8.....
	...
    1920:	00 38 f0 00 00 00 00 00 00 00 00 00 00 00 00 00     .8..............
    1930:	70 60 00 00 00 00 00 00 00 00 00 00 00 00 00 00     p`..............
	...

00001968 <__ctors_end>:
    1968:	11 24       	eor	r1, r1
    196a:	1f be       	out	0x3f, r1	; 63
    196c:	cf ef       	ldi	r28, 0xFF	; 255
    196e:	d0 e1       	ldi	r29, 0x10	; 16
    1970:	de bf       	out	0x3e, r29	; 62
    1972:	cd bf       	out	0x3d, r28	; 61

00001974 <__do_copy_data>:
    1974:	14 e0       	ldi	r17, 0x04	; 4
    1976:	a0 e0       	ldi	r26, 0x00	; 0
    1978:	b1 e0       	ldi	r27, 0x01	; 1
    197a:	e0 e7       	ldi	r30, 0x70	; 112
    197c:	fc e2       	ldi	r31, 0x2C	; 44
    197e:	00 e0       	ldi	r16, 0x00	; 0
    1980:	0b bf       	out	0x3b, r16	; 59
    1982:	02 c0       	rjmp	.+4      	; 0x1988 <__do_copy_data+0x14>
    1984:	07 90       	elpm	r0, Z+
    1986:	0d 92       	st	X+, r0
    1988:	aa 35       	cpi	r26, 0x5A	; 90
    198a:	b1 07       	cpc	r27, r17
    198c:	d9 f7       	brne	.-10     	; 0x1984 <__do_copy_data+0x10>

0000198e <__do_clear_bss>:
    198e:	28 e0       	ldi	r18, 0x08	; 8
    1990:	aa e5       	ldi	r26, 0x5A	; 90
    1992:	b4 e0       	ldi	r27, 0x04	; 4
    1994:	01 c0       	rjmp	.+2      	; 0x1998 <.do_clear_bss_start>

00001996 <.do_clear_bss_loop>:
    1996:	1d 92       	st	X+, r1

00001998 <.do_clear_bss_start>:
    1998:	a0 3c       	cpi	r26, 0xC0	; 192
    199a:	b2 07       	cpc	r27, r18
    199c:	e1 f7       	brne	.-8      	; 0x1996 <.do_clear_bss_loop>
    199e:	de d4       	rcall	.+2492   	; 0x235c <main>
    19a0:	0c 94 36 16 	jmp	0x2c6c	; 0x2c6c <_exit>

000019a4 <__bad_interrupt>:
    19a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000019a8 <Port_init>:
int clearnum = 0;

//포트 초기화
void Port_init(void)
{
   PORTA=0x00; DDRA=0xFF;
    19a8:	1b ba       	out	0x1b, r1	; 27
    19aa:	8f ef       	ldi	r24, 0xFF	; 255
    19ac:	8a bb       	out	0x1a, r24	; 26
   PORTB=0xFF; DDRB=0xFF;
    19ae:	88 bb       	out	0x18, r24	; 24
    19b0:	87 bb       	out	0x17, r24	; 23
   PORTC=0x00; DDRC=0xF0;
    19b2:	15 ba       	out	0x15, r1	; 21
    19b4:	90 ef       	ldi	r25, 0xF0	; 240
    19b6:	94 bb       	out	0x14, r25	; 20
   PORTD=0x80; DDRD=0x80;
    19b8:	90 e8       	ldi	r25, 0x80	; 128
    19ba:	92 bb       	out	0x12, r25	; 18
    19bc:	91 bb       	out	0x11, r25	; 17
   PORTE=0x00; DDRE=0xFF;
    19be:	13 b8       	out	0x03, r1	; 3
    19c0:	82 b9       	out	0x02, r24	; 2
   PORTF=0x00; DDRF=0x00;
    19c2:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    19c6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    19ca:	08 95       	ret

000019cc <Interrupt_init>:
}

//인터럽트 초기화
void Interrupt_init(void)
{
   EIMSK = 0x0F;  //0번, 1번, 2번, 3번 사용
    19cc:	8f e0       	ldi	r24, 0x0F	; 15
    19ce:	89 bf       	out	0x39, r24	; 57
   EICRA = 0xAA;  //0~3번 하강에지 비동기 트리거 설정
    19d0:	8a ea       	ldi	r24, 0xAA	; 170
    19d2:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
   SREG |= 0x80;
    19d6:	8f b7       	in	r24, 0x3f	; 63
    19d8:	80 68       	ori	r24, 0x80	; 128
    19da:	8f bf       	out	0x3f, r24	; 63
    19dc:	08 95       	ret

000019de <init_devices>:
}

//디바이스 초기화
void init_devices(void)
{
   cli();  //모든 인터럽트 금지
    19de:	f8 94       	cli
   Port_init();
    19e0:	e3 df       	rcall	.-58     	; 0x19a8 <Port_init>
   lcd_init();
    19e2:	cf d6       	rcall	.+3486   	; 0x2782 <lcd_init>
   Interrupt_init();
    19e4:	f3 df       	rcall	.-26     	; 0x19cc <Interrupt_init>
    19e6:	78 94       	sei
   sei(); //모든 인터럽트 허가
    19e8:	08 95       	ret

000019ea <__vector_1>:
    19ea:	1f 92       	push	r1
}

// 외부 인터럽트 0
SIGNAL(INT0_vect)
{
    19ec:	0f 92       	push	r0
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	0f 92       	push	r0
    19f2:	11 24       	eor	r1, r1
    19f4:	0b b6       	in	r0, 0x3b	; 59
    19f6:	0f 92       	push	r0
    19f8:	0f 93       	push	r16
    19fa:	2f 93       	push	r18
    19fc:	3f 93       	push	r19
    19fe:	4f 93       	push	r20
    1a00:	5f 93       	push	r21
    1a02:	6f 93       	push	r22
    1a04:	7f 93       	push	r23
    1a06:	8f 93       	push	r24
    1a08:	9f 93       	push	r25
    1a0a:	af 93       	push	r26
    1a0c:	bf 93       	push	r27
    1a0e:	ef 93       	push	r30
    1a10:	ff 93       	push	r31
   button0 = 1; //인터럽트 0
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	90 93 6b 04 	sts	0x046B, r25	; 0x80046b <button0+0x1>
    1a1a:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <button0>
   S_SOUND(); //각 인터럽트 입력할 때마다 효과음을 출력해준다
    1a1e:	f7 d5       	rcall	.+3054   	; 0x260e <S_SOUND>
   
   if(gamestarted != 0){ //게임이 시작한 상태에서만 수행되며 그 이전에는 메인메뉴 조작 등의 역할을 수행합니다. 헬 난이도의 지옥 기타 연주 인터럽트
    1a20:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <gamestarted>
    1a24:	90 91 61 04 	lds	r25, 0x0461	; 0x800461 <gamestarted+0x1>
    1a28:	89 2b       	or	r24, r25
	   S_HELL();
    1a2a:	d1 f0       	breq	.+52     	; 0x1a60 <__vector_1+0x76>
    1a2c:	80 d5       	rcall	.+2816   	; 0x252e <S_HELL>
	   GLCD_BITMAP(small_hell,16,24,48,80);
    1a2e:	00 e5       	ldi	r16, 0x50	; 80
    1a30:	20 e3       	ldi	r18, 0x30	; 48
    1a32:	48 e1       	ldi	r20, 0x18	; 24
    1a34:	60 e1       	ldi	r22, 0x10	; 16
    1a36:	8c e8       	ldi	r24, 0x8C	; 140
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	cc d7       	rcall	.+3992   	; 0x29d4 <GLCD_BITMAP>
	   input[input_cnt] = 1;
    1a3c:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <input_cnt>
    1a40:	90 91 5f 04 	lds	r25, 0x045F	; 0x80045f <input_cnt+0x1>
    1a44:	fc 01       	movw	r30, r24
    1a46:	ee 0f       	add	r30, r30
    1a48:	ff 1f       	adc	r31, r31
    1a4a:	e4 59       	subi	r30, 0x94	; 148
    1a4c:	fb 4f       	sbci	r31, 0xFB	; 251
    1a4e:	21 e0       	ldi	r18, 0x01	; 1
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	31 83       	std	Z+1, r19	; 0x01
    1a54:	20 83       	st	Z, r18
	   input_cnt++;
    1a56:	01 96       	adiw	r24, 0x01	; 1
    1a58:	90 93 5f 04 	sts	0x045F, r25	; 0x80045f <input_cnt+0x1>
    1a5c:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <input_cnt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a60:	29 e9       	ldi	r18, 0x99	; 153
    1a62:	89 e5       	ldi	r24, 0x59	; 89
    1a64:	91 e0       	ldi	r25, 0x01	; 1
    1a66:	21 50       	subi	r18, 0x01	; 1
    1a68:	80 40       	sbci	r24, 0x00	; 0
    1a6a:	90 40       	sbci	r25, 0x00	; 0
    1a6c:	e1 f7       	brne	.-8      	; 0x1a66 <__vector_1+0x7c>
    1a6e:	00 00       	nop
   }
   _delay_ms(30);
}
    1a70:	ff 91       	pop	r31
    1a72:	ef 91       	pop	r30
    1a74:	bf 91       	pop	r27
    1a76:	af 91       	pop	r26
    1a78:	9f 91       	pop	r25
    1a7a:	8f 91       	pop	r24
    1a7c:	7f 91       	pop	r23
    1a7e:	6f 91       	pop	r22
    1a80:	5f 91       	pop	r21
    1a82:	4f 91       	pop	r20
    1a84:	3f 91       	pop	r19
    1a86:	2f 91       	pop	r18
    1a88:	0f 91       	pop	r16
    1a8a:	0f 90       	pop	r0
    1a8c:	0b be       	out	0x3b, r0	; 59
    1a8e:	0f 90       	pop	r0
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	0f 90       	pop	r0
    1a94:	1f 90       	pop	r1
    1a96:	18 95       	reti

00001a98 <__vector_2>:

SIGNAL(INT1_vect)
{
    1a98:	1f 92       	push	r1
    1a9a:	0f 92       	push	r0
    1a9c:	0f b6       	in	r0, 0x3f	; 63
    1a9e:	0f 92       	push	r0
    1aa0:	11 24       	eor	r1, r1
    1aa2:	0b b6       	in	r0, 0x3b	; 59
    1aa4:	0f 92       	push	r0
    1aa6:	0f 93       	push	r16
    1aa8:	2f 93       	push	r18
    1aaa:	3f 93       	push	r19
    1aac:	4f 93       	push	r20
    1aae:	5f 93       	push	r21
    1ab0:	6f 93       	push	r22
    1ab2:	7f 93       	push	r23
    1ab4:	8f 93       	push	r24
    1ab6:	9f 93       	push	r25
    1ab8:	af 93       	push	r26
    1aba:	bf 93       	push	r27
    1abc:	ef 93       	push	r30
    1abe:	ff 93       	push	r31
	button1 = 1;
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	90 93 69 04 	sts	0x0469, r25	; 0x800469 <button1+0x1>
    1ac8:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <button1>
	S_SOUND();
    1acc:	a0 d5       	rcall	.+2880   	; 0x260e <S_SOUND>
	
	if(gamestarted != 0){ //인터럽트1 드럼 연주
    1ace:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <gamestarted>
    1ad2:	90 91 61 04 	lds	r25, 0x0461	; 0x800461 <gamestarted+0x1>
    1ad6:	89 2b       	or	r24, r25
	S_DRUM();
    1ad8:	d1 f0       	breq	.+52     	; 0x1b0e <__vector_2+0x76>
    1ada:	14 d5       	rcall	.+2600   	; 0x2504 <S_DRUM>
	GLCD_BITMAP(small_drum,16,24,48,80);
    1adc:	00 e5       	ldi	r16, 0x50	; 80
    1ade:	20 e3       	ldi	r18, 0x30	; 48
    1ae0:	48 e1       	ldi	r20, 0x18	; 24
    1ae2:	60 e1       	ldi	r22, 0x10	; 16
    1ae4:	8c e2       	ldi	r24, 0x2C	; 44
    1ae6:	9a e0       	ldi	r25, 0x0A	; 10
    1ae8:	75 d7       	rcall	.+3818   	; 0x29d4 <GLCD_BITMAP>
	input[input_cnt] = 1;
    1aea:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <input_cnt>
    1aee:	90 91 5f 04 	lds	r25, 0x045F	; 0x80045f <input_cnt+0x1>
    1af2:	fc 01       	movw	r30, r24
    1af4:	ee 0f       	add	r30, r30
    1af6:	ff 1f       	adc	r31, r31
    1af8:	e4 59       	subi	r30, 0x94	; 148
    1afa:	fb 4f       	sbci	r31, 0xFB	; 251
    1afc:	21 e0       	ldi	r18, 0x01	; 1
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	31 83       	std	Z+1, r19	; 0x01
    1b02:	20 83       	st	Z, r18
	input_cnt++;
    1b04:	01 96       	adiw	r24, 0x01	; 1
    1b06:	90 93 5f 04 	sts	0x045F, r25	; 0x80045f <input_cnt+0x1>
    1b0a:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <input_cnt>
    1b0e:	29 e9       	ldi	r18, 0x99	; 153
    1b10:	89 e5       	ldi	r24, 0x59	; 89
    1b12:	91 e0       	ldi	r25, 0x01	; 1
    1b14:	21 50       	subi	r18, 0x01	; 1
    1b16:	80 40       	sbci	r24, 0x00	; 0
    1b18:	90 40       	sbci	r25, 0x00	; 0
    1b1a:	e1 f7       	brne	.-8      	; 0x1b14 <__vector_2+0x7c>
    1b1c:	00 00       	nop
	}
	_delay_ms(30);
}
    1b1e:	ff 91       	pop	r31
    1b20:	ef 91       	pop	r30
    1b22:	bf 91       	pop	r27
    1b24:	af 91       	pop	r26
    1b26:	9f 91       	pop	r25
    1b28:	8f 91       	pop	r24
    1b2a:	7f 91       	pop	r23
    1b2c:	6f 91       	pop	r22
    1b2e:	5f 91       	pop	r21
    1b30:	4f 91       	pop	r20
    1b32:	3f 91       	pop	r19
    1b34:	2f 91       	pop	r18
    1b36:	0f 91       	pop	r16
    1b38:	0f 90       	pop	r0
    1b3a:	0b be       	out	0x3b, r0	; 59
    1b3c:	0f 90       	pop	r0
    1b3e:	0f be       	out	0x3f, r0	; 63
    1b40:	0f 90       	pop	r0
    1b42:	1f 90       	pop	r1
    1b44:	18 95       	reti

00001b46 <__vector_3>:

SIGNAL(INT2_vect)
{
    1b46:	1f 92       	push	r1
    1b48:	0f 92       	push	r0
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	0f 92       	push	r0
    1b4e:	11 24       	eor	r1, r1
    1b50:	0b b6       	in	r0, 0x3b	; 59
    1b52:	0f 92       	push	r0
    1b54:	0f 93       	push	r16
    1b56:	2f 93       	push	r18
    1b58:	3f 93       	push	r19
    1b5a:	4f 93       	push	r20
    1b5c:	5f 93       	push	r21
    1b5e:	6f 93       	push	r22
    1b60:	7f 93       	push	r23
    1b62:	8f 93       	push	r24
    1b64:	9f 93       	push	r25
    1b66:	af 93       	push	r26
    1b68:	bf 93       	push	r27
    1b6a:	ef 93       	push	r30
    1b6c:	ff 93       	push	r31
	button2 = 1; //인터럽트2 기타 연주
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	90 93 67 04 	sts	0x0467, r25	; 0x800467 <button2+0x1>
    1b76:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <button2>
	S_SOUND();
    1b7a:	49 d5       	rcall	.+2706   	; 0x260e <S_SOUND>
	
	if(gamestarted != 0){
    1b7c:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <gamestarted>
    1b80:	90 91 61 04 	lds	r25, 0x0461	; 0x800461 <gamestarted+0x1>
    1b84:	89 2b       	or	r24, r25
	S_GUITAR();
    1b86:	d1 f0       	breq	.+52     	; 0x1bbc <__vector_3+0x76>
    1b88:	a8 d4       	rcall	.+2384   	; 0x24da <S_GUITAR>
	GLCD_BITMAP(small_guitar,16,24,48,80);
    1b8a:	00 e5       	ldi	r16, 0x50	; 80
    1b8c:	20 e3       	ldi	r18, 0x30	; 48
    1b8e:	48 e1       	ldi	r20, 0x18	; 24
    1b90:	60 e1       	ldi	r22, 0x10	; 16
    1b92:	8c e4       	ldi	r24, 0x4C	; 76
    1b94:	98 e0       	ldi	r25, 0x08	; 8
    1b96:	1e d7       	rcall	.+3644   	; 0x29d4 <GLCD_BITMAP>
	input[input_cnt] = 2;
    1b98:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <input_cnt>
    1b9c:	90 91 5f 04 	lds	r25, 0x045F	; 0x80045f <input_cnt+0x1>
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	ee 0f       	add	r30, r30
    1ba4:	ff 1f       	adc	r31, r31
    1ba6:	e4 59       	subi	r30, 0x94	; 148
    1ba8:	fb 4f       	sbci	r31, 0xFB	; 251
    1baa:	22 e0       	ldi	r18, 0x02	; 2
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	31 83       	std	Z+1, r19	; 0x01
    1bb0:	20 83       	st	Z, r18
	input_cnt++;
    1bb2:	01 96       	adiw	r24, 0x01	; 1
    1bb4:	90 93 5f 04 	sts	0x045F, r25	; 0x80045f <input_cnt+0x1>
    1bb8:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <input_cnt>
    1bbc:	29 e9       	ldi	r18, 0x99	; 153
    1bbe:	89 e5       	ldi	r24, 0x59	; 89
    1bc0:	91 e0       	ldi	r25, 0x01	; 1
    1bc2:	21 50       	subi	r18, 0x01	; 1
    1bc4:	80 40       	sbci	r24, 0x00	; 0
    1bc6:	90 40       	sbci	r25, 0x00	; 0
    1bc8:	e1 f7       	brne	.-8      	; 0x1bc2 <__vector_3+0x7c>
    1bca:	00 00       	nop
	}
	
	_delay_ms(30);
}
    1bcc:	ff 91       	pop	r31
    1bce:	ef 91       	pop	r30
    1bd0:	bf 91       	pop	r27
    1bd2:	af 91       	pop	r26
    1bd4:	9f 91       	pop	r25
    1bd6:	8f 91       	pop	r24
    1bd8:	7f 91       	pop	r23
    1bda:	6f 91       	pop	r22
    1bdc:	5f 91       	pop	r21
    1bde:	4f 91       	pop	r20
    1be0:	3f 91       	pop	r19
    1be2:	2f 91       	pop	r18
    1be4:	0f 91       	pop	r16
    1be6:	0f 90       	pop	r0
    1be8:	0b be       	out	0x3b, r0	; 59
    1bea:	0f 90       	pop	r0
    1bec:	0f be       	out	0x3f, r0	; 63
    1bee:	0f 90       	pop	r0
    1bf0:	1f 90       	pop	r1
    1bf2:	18 95       	reti

00001bf4 <__vector_4>:

SIGNAL(INT3_vect)
{
    1bf4:	1f 92       	push	r1
    1bf6:	0f 92       	push	r0
    1bf8:	0f b6       	in	r0, 0x3f	; 63
    1bfa:	0f 92       	push	r0
    1bfc:	11 24       	eor	r1, r1
    1bfe:	0b b6       	in	r0, 0x3b	; 59
    1c00:	0f 92       	push	r0
    1c02:	0f 93       	push	r16
    1c04:	2f 93       	push	r18
    1c06:	3f 93       	push	r19
    1c08:	4f 93       	push	r20
    1c0a:	5f 93       	push	r21
    1c0c:	6f 93       	push	r22
    1c0e:	7f 93       	push	r23
    1c10:	8f 93       	push	r24
    1c12:	9f 93       	push	r25
    1c14:	af 93       	push	r26
    1c16:	bf 93       	push	r27
    1c18:	ef 93       	push	r30
    1c1a:	ff 93       	push	r31
	button3 = 1; //인터럽트3 키보드 연주
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	90 93 65 04 	sts	0x0465, r25	; 0x800465 <button3+0x1>
    1c24:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <button3>
	S_SOUND();
    1c28:	f2 d4       	rcall	.+2532   	; 0x260e <S_SOUND>
	
	if(gamestarted != 0){
    1c2a:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <gamestarted>
    1c2e:	90 91 61 04 	lds	r25, 0x0461	; 0x800461 <gamestarted+0x1>
    1c32:	89 2b       	or	r24, r25
	S_KEYBOARD();
    1c34:	d1 f0       	breq	.+52     	; 0x1c6a <__vector_4+0x76>
    1c36:	28 d4       	rcall	.+2128   	; 0x2488 <S_KEYBOARD>
	GLCD_BITMAP(small_keyboard,16,24,48,80);
    1c38:	00 e5       	ldi	r16, 0x50	; 80
    1c3a:	20 e3       	ldi	r18, 0x30	; 48
    1c3c:	48 e1       	ldi	r20, 0x18	; 24
    1c3e:	60 e1       	ldi	r22, 0x10	; 16
    1c40:	8c e6       	ldi	r24, 0x6C	; 108
    1c42:	96 e0       	ldi	r25, 0x06	; 6
    1c44:	c7 d6       	rcall	.+3470   	; 0x29d4 <GLCD_BITMAP>
	input[input_cnt] = 3;
    1c46:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <input_cnt>
    1c4a:	90 91 5f 04 	lds	r25, 0x045F	; 0x80045f <input_cnt+0x1>
    1c4e:	fc 01       	movw	r30, r24
    1c50:	ee 0f       	add	r30, r30
    1c52:	ff 1f       	adc	r31, r31
    1c54:	e4 59       	subi	r30, 0x94	; 148
    1c56:	fb 4f       	sbci	r31, 0xFB	; 251
    1c58:	23 e0       	ldi	r18, 0x03	; 3
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	31 83       	std	Z+1, r19	; 0x01
    1c5e:	20 83       	st	Z, r18
	input_cnt++;
    1c60:	01 96       	adiw	r24, 0x01	; 1
    1c62:	90 93 5f 04 	sts	0x045F, r25	; 0x80045f <input_cnt+0x1>
    1c66:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <input_cnt>
    1c6a:	29 e9       	ldi	r18, 0x99	; 153
    1c6c:	89 e5       	ldi	r24, 0x59	; 89
    1c6e:	91 e0       	ldi	r25, 0x01	; 1
    1c70:	21 50       	subi	r18, 0x01	; 1
    1c72:	80 40       	sbci	r24, 0x00	; 0
    1c74:	90 40       	sbci	r25, 0x00	; 0
    1c76:	e1 f7       	brne	.-8      	; 0x1c70 <__vector_4+0x7c>
    1c78:	00 00       	nop
	}
	
	_delay_ms(30);
}
    1c7a:	ff 91       	pop	r31
    1c7c:	ef 91       	pop	r30
    1c7e:	bf 91       	pop	r27
    1c80:	af 91       	pop	r26
    1c82:	9f 91       	pop	r25
    1c84:	8f 91       	pop	r24
    1c86:	7f 91       	pop	r23
    1c88:	6f 91       	pop	r22
    1c8a:	5f 91       	pop	r21
    1c8c:	4f 91       	pop	r20
    1c8e:	3f 91       	pop	r19
    1c90:	2f 91       	pop	r18
    1c92:	0f 91       	pop	r16
    1c94:	0f 90       	pop	r0
    1c96:	0b be       	out	0x3b, r0	; 59
    1c98:	0f 90       	pop	r0
    1c9a:	0f be       	out	0x3f, r0	; 63
    1c9c:	0f 90       	pop	r0
    1c9e:	1f 90       	pop	r1
    1ca0:	18 95       	reti

00001ca2 <int_string>:

char* int_string(char* str,int i) //string과 int를 합쳐주는 함수
{
    1ca2:	cf 93       	push	r28
    1ca4:	df 93       	push	r29
    1ca6:	ec 01       	movw	r28, r24
    1ca8:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1caa:	4a e0       	ldi	r20, 0x0A	; 10
    1cac:	68 e8       	ldi	r22, 0x88	; 136
    1cae:	73 e0       	ldi	r23, 0x03	; 3
    1cb0:	4d d7       	rcall	.+3738   	; 0x2b4c <__itoa_ncheck>
	char* str2 = "";
	itoa(i,str2,10);
	strcat(str,str2);
	return str;
}
    1cb2:	ce 01       	movw	r24, r28
    1cb4:	df 91       	pop	r29
    1cb6:	cf 91       	pop	r28
    1cb8:	08 95       	ret

00001cba <how_to_play>:

void how_to_play() { //버튼을 이용한 플레이 설명, 0번으로 돌아가기
	lcd_clear();
    1cba:	4a d5       	rcall	.+2708   	; 0x2750 <lcd_clear>
	lcd_str(1,0,"BUTTON 0 : MAIN MENU");
    1cbc:	45 ee       	ldi	r20, 0xE5	; 229
    1cbe:	52 e0       	ldi	r21, 0x02	; 2
    1cc0:	60 e0       	ldi	r22, 0x00	; 0
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	be d5       	rcall	.+2940   	; 0x2842 <lcd_str>
	lcd_str(3,0,"BUTTON 1 : DRUM");
    1cc6:	4a ef       	ldi	r20, 0xFA	; 250
    1cc8:	52 e0       	ldi	r21, 0x02	; 2
    1cca:	60 e0       	ldi	r22, 0x00	; 0
    1ccc:	83 e0       	ldi	r24, 0x03	; 3
    1cce:	b9 d5       	rcall	.+2930   	; 0x2842 <lcd_str>
	lcd_str(5,0,"BUTTON 2 : GUITAR");
    1cd0:	4a e0       	ldi	r20, 0x0A	; 10
    1cd2:	53 e0       	ldi	r21, 0x03	; 3
    1cd4:	60 e0       	ldi	r22, 0x00	; 0
    1cd6:	85 e0       	ldi	r24, 0x05	; 5
    1cd8:	b4 d5       	rcall	.+2920   	; 0x2842 <lcd_str>
	lcd_str(7,0,"BUTTON 3 : KEYBOARD");
    1cda:	4c e1       	ldi	r20, 0x1C	; 28
    1cdc:	53 e0       	ldi	r21, 0x03	; 3
    1cde:	60 e0       	ldi	r22, 0x00	; 0
    1ce0:	87 e0       	ldi	r24, 0x07	; 7
	
	while(1) {
		S_MAIN();
    1ce2:	af d5       	rcall	.+2910   	; 0x2842 <lcd_str>
    1ce4:	4d d4       	rcall	.+2202   	; 0x2580 <S_MAIN>
		if(button0 == 1){
    1ce6:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <button0>
    1cea:	90 91 6b 04 	lds	r25, 0x046B	; 0x80046b <button0+0x1>
    1cee:	01 97       	sbiw	r24, 0x01	; 1
    1cf0:	c9 f7       	brne	.-14     	; 0x1ce4 <how_to_play+0x2a>
			button0 = 0;
    1cf2:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <button0+0x1>
    1cf6:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <button0>
    1cfa:	08 95       	ret

00001cfc <game_start>:
		}
	}
	return;
}

void game_start() {
    1cfc:	0f 93       	push	r16
    1cfe:	cf 93       	push	r28
    1d00:	df 93       	push	r29
	cli();
    1d02:	f8 94       	cli
	srand(seed); //시드 값을 이용해서 랜덤값을 준다
    1d04:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <seed>
    1d08:	90 91 63 04 	lds	r25, 0x0463	; 0x800463 <seed+0x1>
    1d0c:	14 d7       	rcall	.+3624   	; 0x2b36 <srand>
	level = 1;
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <level+0x1>
    1d16:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <level>
	life=3;
    1d1a:	83 e0       	ldi	r24, 0x03	; 3
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <life+0x1>
    1d22:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <life>
	
	lcd_clear(); 
    1d26:	14 d5       	rcall	.+2600   	; 0x2750 <lcd_clear>
	if(diff == 0)lcd_str(4,4,"NORMAL MODE"); //현재의 난이도를 알려준다
    1d28:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <diff>
    1d2c:	90 91 5d 04 	lds	r25, 0x045D	; 0x80045d <diff+0x1>
    1d30:	89 2b       	or	r24, r25
    1d32:	29 f4       	brne	.+10     	; 0x1d3e <game_start+0x42>
    1d34:	40 e3       	ldi	r20, 0x30	; 48
    1d36:	53 e0       	ldi	r21, 0x03	; 3
    1d38:	64 e0       	ldi	r22, 0x04	; 4
    1d3a:	84 e0       	ldi	r24, 0x04	; 4
    1d3c:	82 d5       	rcall	.+2820   	; 0x2842 <lcd_str>
	if(diff == 2)lcd_str(4,4,"HARD MODE");
    1d3e:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <diff>
    1d42:	90 91 5d 04 	lds	r25, 0x045D	; 0x80045d <diff+0x1>
    1d46:	02 97       	sbiw	r24, 0x02	; 2
    1d48:	29 f4       	brne	.+10     	; 0x1d54 <game_start+0x58>
    1d4a:	4c e3       	ldi	r20, 0x3C	; 60
    1d4c:	53 e0       	ldi	r21, 0x03	; 3
    1d4e:	64 e0       	ldi	r22, 0x04	; 4
    1d50:	84 e0       	ldi	r24, 0x04	; 4
    1d52:	77 d5       	rcall	.+2798   	; 0x2842 <lcd_str>
	if(diff == 4)lcd_str(4,4,"HELL MODE");
    1d54:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <diff>
    1d58:	90 91 5d 04 	lds	r25, 0x045D	; 0x80045d <diff+0x1>
    1d5c:	04 97       	sbiw	r24, 0x04	; 4
    1d5e:	29 f4       	brne	.+10     	; 0x1d6a <game_start+0x6e>
    1d60:	46 e4       	ldi	r20, 0x46	; 70
    1d62:	53 e0       	ldi	r21, 0x03	; 3
    1d64:	64 e0       	ldi	r22, 0x04	; 4
    1d66:	84 e0       	ldi	r24, 0x04	; 4
    1d68:	6c d5       	rcall	.+2776   	; 0x2842 <lcd_str>
    1d6a:	2f ef       	ldi	r18, 0xFF	; 255
    1d6c:	8f ef       	ldi	r24, 0xFF	; 255
    1d6e:	99 e5       	ldi	r25, 0x59	; 89
    1d70:	21 50       	subi	r18, 0x01	; 1
    1d72:	80 40       	sbci	r24, 0x00	; 0
    1d74:	90 40       	sbci	r25, 0x00	; 0
    1d76:	e1 f7       	brne	.-8      	; 0x1d70 <game_start+0x74>
    1d78:	00 c0       	rjmp	.+0      	; 0x1d7a <game_start+0x7e>
	
	_delay_ms(2000);
	
	lcd_clear();
    1d7a:	00 00       	nop
	lcd_str(4,4,"MUSIC START!"); //MUSIC START!
    1d7c:	e9 d4       	rcall	.+2514   	; 0x2750 <lcd_clear>
    1d7e:	40 e5       	ldi	r20, 0x50	; 80
    1d80:	53 e0       	ldi	r21, 0x03	; 3
    1d82:	64 e0       	ldi	r22, 0x04	; 4
    1d84:	84 e0       	ldi	r24, 0x04	; 4
    1d86:	5d d5       	rcall	.+2746   	; 0x2842 <lcd_str>
    1d88:	2f ef       	ldi	r18, 0xFF	; 255
    1d8a:	8f ef       	ldi	r24, 0xFF	; 255
    1d8c:	99 e5       	ldi	r25, 0x59	; 89
    1d8e:	21 50       	subi	r18, 0x01	; 1
    1d90:	80 40       	sbci	r24, 0x00	; 0
    1d92:	90 40       	sbci	r25, 0x00	; 0
    1d94:	e1 f7       	brne	.-8      	; 0x1d8e <game_start+0x92>
    1d96:	00 c0       	rjmp	.+0      	; 0x1d98 <game_start+0x9c>
    1d98:	00 00       	nop
    1d9a:	ea c1       	rjmp	.+980    	; 0x2170 <game_start+0x474>
	_delay_ms(2000);
	
	while(level <= endlevel + diff){ //노말 난이도 5레벨까지 하드 난이도 7레벨까지
		for(int i = 0; i < 20; i++){ //정답과 입력 배열 초기화
			answer[i] = 5;
    1d9c:	c9 01       	movw	r24, r18
    1d9e:	88 0f       	add	r24, r24
    1da0:	99 1f       	adc	r25, r25
    1da2:	fc 01       	movw	r30, r24
    1da4:	ec 56       	subi	r30, 0x6C	; 108
    1da6:	fb 4f       	sbci	r31, 0xFB	; 251
    1da8:	45 e0       	ldi	r20, 0x05	; 5
    1daa:	50 e0       	ldi	r21, 0x00	; 0
    1dac:	51 83       	std	Z+1, r21	; 0x01
    1dae:	40 83       	st	Z, r20
			input[i] = 6;
    1db0:	fc 01       	movw	r30, r24
    1db2:	e4 59       	subi	r30, 0x94	; 148
    1db4:	fb 4f       	sbci	r31, 0xFB	; 251
    1db6:	46 e0       	ldi	r20, 0x06	; 6
    1db8:	50 e0       	ldi	r21, 0x00	; 0
    1dba:	51 83       	std	Z+1, r21	; 0x01
    1dbc:	40 83       	st	Z, r20
	lcd_clear();
	lcd_str(4,4,"MUSIC START!"); //MUSIC START!
	_delay_ms(2000);
	
	while(level <= endlevel + diff){ //노말 난이도 5레벨까지 하드 난이도 7레벨까지
		for(int i = 0; i < 20; i++){ //정답과 입력 배열 초기화
    1dbe:	2f 5f       	subi	r18, 0xFF	; 255
    1dc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc2:	02 c0       	rjmp	.+4      	; 0x1dc8 <game_start+0xcc>
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	24 31       	cpi	r18, 0x14	; 20
			answer[i] = 5;
			input[i] = 6;
		}
		
		lcd_clear();
    1dca:	31 05       	cpc	r19, r1
    1dcc:	3c f3       	brlt	.-50     	; 0x1d9c <game_start+0xa0>
		lcd_str(4,6,"LEVEL "); //level 표시
    1dce:	c0 d4       	rcall	.+2432   	; 0x2750 <lcd_clear>
    1dd0:	4d e5       	ldi	r20, 0x5D	; 93
    1dd2:	53 e0       	ldi	r21, 0x03	; 3
    1dd4:	66 e0       	ldi	r22, 0x06	; 6
    1dd6:	84 e0       	ldi	r24, 0x04	; 4
		GLCD_NUM(level,1);
    1dd8:	34 d5       	rcall	.+2664   	; 0x2842 <lcd_str>
    1dda:	61 e0       	ldi	r22, 0x01	; 1
    1ddc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <level>
    1de0:	6e d5       	rcall	.+2780   	; 0x28be <GLCD_NUM>
    1de2:	2f ef       	ldi	r18, 0xFF	; 255
    1de4:	8f ef       	ldi	r24, 0xFF	; 255
    1de6:	99 e5       	ldi	r25, 0x59	; 89
    1de8:	21 50       	subi	r18, 0x01	; 1
    1dea:	80 40       	sbci	r24, 0x00	; 0
    1dec:	90 40       	sbci	r25, 0x00	; 0
    1dee:	e1 f7       	brne	.-8      	; 0x1de8 <game_start+0xec>
    1df0:	00 c0       	rjmp	.+0      	; 0x1df2 <game_start+0xf6>
		_delay_ms(2000);
		
		int random = 0;
		
		for(int i = 0; i < level+3; i++) //level + 2만큼 연주 순서가 출력된다. 예를 들어 1레벨이면 5회, 2레벨이면 6회
    1df2:	00 00       	nop
    1df4:	c0 e0       	ldi	r28, 0x00	; 0
    1df6:	d0 e0       	ldi	r29, 0x00	; 0
		{
			lcd_clear();
    1df8:	80 c0       	rjmp	.+256    	; 0x1efa <game_start+0x1fe>
    1dfa:	aa d4       	rcall	.+2388   	; 0x2750 <lcd_clear>
    1dfc:	2f ef       	ldi	r18, 0xFF	; 255
    1dfe:	8f e7       	ldi	r24, 0x7F	; 127
    1e00:	96 e1       	ldi	r25, 0x16	; 22
    1e02:	21 50       	subi	r18, 0x01	; 1
    1e04:	80 40       	sbci	r24, 0x00	; 0
    1e06:	90 40       	sbci	r25, 0x00	; 0
    1e08:	e1 f7       	brne	.-8      	; 0x1e02 <game_start+0x106>
			_delay_ms(500);
			if(diff != 4)random = rand()%3;
    1e0a:	00 c0       	rjmp	.+0      	; 0x1e0c <game_start+0x110>
    1e0c:	00 00       	nop
    1e0e:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <diff>
    1e12:	90 91 5d 04 	lds	r25, 0x045D	; 0x80045d <diff+0x1>
    1e16:	04 97       	sbiw	r24, 0x04	; 4
    1e18:	29 f0       	breq	.+10     	; 0x1e24 <game_start+0x128>
    1e1a:	8a d6       	rcall	.+3348   	; 0x2b30 <rand>
    1e1c:	63 e0       	ldi	r22, 0x03	; 3
    1e1e:	70 e0       	ldi	r23, 0x00	; 0
    1e20:	2d d6       	rcall	.+3162   	; 0x2a7c <__divmodhi4>
			else random = rand()%4;
    1e22:	09 c0       	rjmp	.+18     	; 0x1e36 <game_start+0x13a>
    1e24:	85 d6       	rcall	.+3338   	; 0x2b30 <rand>
    1e26:	83 70       	andi	r24, 0x03	; 3
    1e28:	90 78       	andi	r25, 0x80	; 128
    1e2a:	99 23       	and	r25, r25
    1e2c:	24 f4       	brge	.+8      	; 0x1e36 <game_start+0x13a>
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	8c 6f       	ori	r24, 0xFC	; 252
    1e32:	9f 6f       	ori	r25, 0xFF	; 255
			
			switch(random){
    1e34:	01 96       	adiw	r24, 0x01	; 1
    1e36:	81 30       	cpi	r24, 0x01	; 1
    1e38:	91 05       	cpc	r25, r1
    1e3a:	e1 f0       	breq	.+56     	; 0x1e74 <game_start+0x178>
    1e3c:	1c f4       	brge	.+6      	; 0x1e44 <game_start+0x148>
    1e3e:	89 2b       	or	r24, r25
    1e40:	39 f0       	breq	.+14     	; 0x1e50 <game_start+0x154>
    1e42:	4c c0       	rjmp	.+152    	; 0x1edc <game_start+0x1e0>
    1e44:	82 30       	cpi	r24, 0x02	; 2
    1e46:	91 05       	cpc	r25, r1
    1e48:	39 f1       	breq	.+78     	; 0x1e98 <game_start+0x19c>
    1e4a:	03 97       	sbiw	r24, 0x03	; 3
				case 0:
				S_DRUM();
    1e4c:	b9 f1       	breq	.+110    	; 0x1ebc <game_start+0x1c0>
    1e4e:	46 c0       	rjmp	.+140    	; 0x1edc <game_start+0x1e0>
				GLCD_BITMAP(drum,0,0,60,120);
    1e50:	59 d3       	rcall	.+1714   	; 0x2504 <S_DRUM>
    1e52:	08 e7       	ldi	r16, 0x78	; 120
    1e54:	2c e3       	ldi	r18, 0x3C	; 60
    1e56:	40 e0       	ldi	r20, 0x00	; 0
    1e58:	60 e0       	ldi	r22, 0x00	; 0
    1e5a:	84 e1       	ldi	r24, 0x14	; 20
    1e5c:	93 e1       	ldi	r25, 0x13	; 19
				answer[i] = 1;
    1e5e:	ba d5       	rcall	.+2932   	; 0x29d4 <GLCD_BITMAP>
    1e60:	fe 01       	movw	r30, r28
    1e62:	ee 0f       	add	r30, r30
    1e64:	ff 1f       	adc	r31, r31
    1e66:	ec 56       	subi	r30, 0x6C	; 108
    1e68:	fb 4f       	sbci	r31, 0xFB	; 251
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
				break;
    1e6e:	91 83       	std	Z+1, r25	; 0x01
				
				case 1:
				S_GUITAR();
    1e70:	80 83       	st	Z, r24
    1e72:	39 c0       	rjmp	.+114    	; 0x1ee6 <game_start+0x1ea>
				GLCD_BITMAP(guitar,0,0,60,120);
    1e74:	32 d3       	rcall	.+1636   	; 0x24da <S_GUITAR>
    1e76:	08 e7       	ldi	r16, 0x78	; 120
    1e78:	2c e3       	ldi	r18, 0x3C	; 60
    1e7a:	40 e0       	ldi	r20, 0x00	; 0
    1e7c:	60 e0       	ldi	r22, 0x00	; 0
    1e7e:	80 e9       	ldi	r24, 0x90	; 144
    1e80:	9f e0       	ldi	r25, 0x0F	; 15
				answer[i] = 2;
    1e82:	a8 d5       	rcall	.+2896   	; 0x29d4 <GLCD_BITMAP>
    1e84:	fe 01       	movw	r30, r28
    1e86:	ee 0f       	add	r30, r30
    1e88:	ff 1f       	adc	r31, r31
    1e8a:	ec 56       	subi	r30, 0x6C	; 108
    1e8c:	fb 4f       	sbci	r31, 0xFB	; 251
    1e8e:	82 e0       	ldi	r24, 0x02	; 2
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	91 83       	std	Z+1, r25	; 0x01
				break;
    1e94:	80 83       	st	Z, r24
				
				case 2:
				S_KEYBOARD();
    1e96:	27 c0       	rjmp	.+78     	; 0x1ee6 <game_start+0x1ea>
				GLCD_BITMAP(keyboard,0,0,60,120);
    1e98:	f7 d2       	rcall	.+1518   	; 0x2488 <S_KEYBOARD>
    1e9a:	08 e7       	ldi	r16, 0x78	; 120
    1e9c:	2c e3       	ldi	r18, 0x3C	; 60
    1e9e:	40 e0       	ldi	r20, 0x00	; 0
    1ea0:	60 e0       	ldi	r22, 0x00	; 0
    1ea2:	8c e0       	ldi	r24, 0x0C	; 12
    1ea4:	9c e0       	ldi	r25, 0x0C	; 12
				answer[i] = 3;
    1ea6:	96 d5       	rcall	.+2860   	; 0x29d4 <GLCD_BITMAP>
    1ea8:	fe 01       	movw	r30, r28
    1eaa:	ee 0f       	add	r30, r30
    1eac:	ff 1f       	adc	r31, r31
    1eae:	ec 56       	subi	r30, 0x6C	; 108
    1eb0:	fb 4f       	sbci	r31, 0xFB	; 251
    1eb2:	83 e0       	ldi	r24, 0x03	; 3
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	91 83       	std	Z+1, r25	; 0x01
				break;
    1eb8:	80 83       	st	Z, r24
				
				case 3:
				S_HELL();
    1eba:	15 c0       	rjmp	.+42     	; 0x1ee6 <game_start+0x1ea>
				GLCD_BITMAP(hell,0,0,60,128);
    1ebc:	38 d3       	rcall	.+1648   	; 0x252e <S_HELL>
    1ebe:	00 e8       	ldi	r16, 0x80	; 128
    1ec0:	2c e3       	ldi	r18, 0x3C	; 60
    1ec2:	40 e0       	ldi	r20, 0x00	; 0
    1ec4:	60 e0       	ldi	r22, 0x00	; 0
    1ec6:	8c e6       	ldi	r24, 0x6C	; 108
    1ec8:	92 e0       	ldi	r25, 0x02	; 2
    1eca:	84 d5       	rcall	.+2824   	; 0x29d4 <GLCD_BITMAP>
				answer[i] = 0;
    1ecc:	fe 01       	movw	r30, r28
    1ece:	ee 0f       	add	r30, r30
    1ed0:	ff 1f       	adc	r31, r31
    1ed2:	ec 56       	subi	r30, 0x6C	; 108
    1ed4:	fb 4f       	sbci	r31, 0xFB	; 251
    1ed6:	11 82       	std	Z+1, r1	; 0x01
    1ed8:	10 82       	st	Z, r1
				break;
    1eda:	05 c0       	rjmp	.+10     	; 0x1ee6 <game_start+0x1ea>
				
				default:
				lcd_str(4,6,"ERROR");
    1edc:	44 e6       	ldi	r20, 0x64	; 100
    1ede:	53 e0       	ldi	r21, 0x03	; 3
    1ee0:	66 e0       	ldi	r22, 0x06	; 6
    1ee2:	84 e0       	ldi	r24, 0x04	; 4
    1ee4:	ae d4       	rcall	.+2396   	; 0x2842 <lcd_str>
    1ee6:	2f ef       	ldi	r18, 0xFF	; 255
    1ee8:	8f ef       	ldi	r24, 0xFF	; 255
    1eea:	93 e2       	ldi	r25, 0x23	; 35
    1eec:	21 50       	subi	r18, 0x01	; 1
    1eee:	80 40       	sbci	r24, 0x00	; 0
    1ef0:	90 40       	sbci	r25, 0x00	; 0
    1ef2:	e1 f7       	brne	.-8      	; 0x1eec <game_start+0x1f0>
    1ef4:	00 c0       	rjmp	.+0      	; 0x1ef6 <game_start+0x1fa>
		GLCD_NUM(level,1);
		_delay_ms(2000);
		
		int random = 0;
		
		for(int i = 0; i < level+3; i++) //level + 2만큼 연주 순서가 출력된다. 예를 들어 1레벨이면 5회, 2레벨이면 6회
    1ef6:	00 00       	nop
    1ef8:	21 96       	adiw	r28, 0x01	; 1
    1efa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <level>
    1efe:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <level+0x1>
    1f02:	03 96       	adiw	r24, 0x03	; 3
    1f04:	c8 17       	cp	r28, r24
    1f06:	d9 07       	cpc	r29, r25
			}
			_delay_ms(800);
		}
		
		random = 0;
		lcd_clear();
    1f08:	0c f4       	brge	.+2      	; 0x1f0c <game_start+0x210>
    1f0a:	77 cf       	rjmp	.-274    	; 0x1dfa <game_start+0xfe>
		lcd_str(4,4,"ARE YOU READY?");
    1f0c:	21 d4       	rcall	.+2114   	; 0x2750 <lcd_clear>
    1f0e:	4a e6       	ldi	r20, 0x6A	; 106
    1f10:	53 e0       	ldi	r21, 0x03	; 3
    1f12:	64 e0       	ldi	r22, 0x04	; 4
    1f14:	84 e0       	ldi	r24, 0x04	; 4
    1f16:	95 d4       	rcall	.+2346   	; 0x2842 <lcd_str>
    1f18:	2f ef       	ldi	r18, 0xFF	; 255
    1f1a:	8f ef       	ldi	r24, 0xFF	; 255
    1f1c:	9c e2       	ldi	r25, 0x2C	; 44
    1f1e:	21 50       	subi	r18, 0x01	; 1
    1f20:	80 40       	sbci	r24, 0x00	; 0
    1f22:	90 40       	sbci	r25, 0x00	; 0
    1f24:	e1 f7       	brne	.-8      	; 0x1f1e <game_start+0x222>
    1f26:	00 c0       	rjmp	.+0      	; 0x1f28 <game_start+0x22c>
		_delay_ms(1000);
		input_cnt = 0;
    1f28:	00 00       	nop
    1f2a:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <input_cnt+0x1>
		
		lcd_clear();
    1f2e:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <input_cnt>
		gamestarted = 1; //게임이 시작되었음을 알리며 이제부터 버튼을 누르면 악기 모습과 함께 연주음이 들린다
    1f32:	0e d4       	rcall	.+2076   	; 0x2750 <lcd_clear>
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	90 93 61 04 	sts	0x0461, r25	; 0x800461 <gamestarted+0x1>
		lcd_str(4,10,"GO");
    1f3c:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <gamestarted>
    1f40:	49 e7       	ldi	r20, 0x79	; 121
    1f42:	53 e0       	ldi	r21, 0x03	; 3
    1f44:	6a e0       	ldi	r22, 0x0A	; 10
		sei(); //활성화
    1f46:	84 e0       	ldi	r24, 0x04	; 4
    1f48:	7c d4       	rcall	.+2296   	; 0x2842 <lcd_str>
    1f4a:	78 94       	sei
    1f4c:	2f ef       	ldi	r18, 0xFF	; 255
    1f4e:	8f ef       	ldi	r24, 0xFF	; 255
    1f50:	9c e2       	ldi	r25, 0x2C	; 44
    1f52:	21 50       	subi	r18, 0x01	; 1
    1f54:	80 40       	sbci	r24, 0x00	; 0
    1f56:	90 40       	sbci	r25, 0x00	; 0
		_delay_ms(1000);
		lcd_clear();
    1f58:	e1 f7       	brne	.-8      	; 0x1f52 <game_start+0x256>
    1f5a:	00 c0       	rjmp	.+0      	; 0x1f5c <game_start+0x260>
		
		int count = 10; //기본 시간 10초
    1f5c:	00 00       	nop
    1f5e:	f8 d3       	rcall	.+2032   	; 0x2750 <lcd_clear>
		int success = 1; //성공 여부 확인
		
		while(count>0) //10초 동안 알맞은 순서로 입력해야 한다
		{
			lcd_str(0,1,"L : "); //라이프 표시
    1f60:	ca e0       	ldi	r28, 0x0A	; 10
    1f62:	d0 e0       	ldi	r29, 0x00	; 0
    1f64:	28 c0       	rjmp	.+80     	; 0x1fb6 <game_start+0x2ba>
    1f66:	4c e7       	ldi	r20, 0x7C	; 124
    1f68:	53 e0       	ldi	r21, 0x03	; 3
    1f6a:	61 e0       	ldi	r22, 0x01	; 1
			GLCD_NUM(life,1);
    1f6c:	80 e0       	ldi	r24, 0x00	; 0
    1f6e:	69 d4       	rcall	.+2258   	; 0x2842 <lcd_str>
    1f70:	61 e0       	ldi	r22, 0x01	; 1
    1f72:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <life>
			lcd_str(0,10,int_string("TIME : ",count)); //남은 시간 표시
    1f76:	a3 d4       	rcall	.+2374   	; 0x28be <GLCD_NUM>
    1f78:	be 01       	movw	r22, r28
    1f7a:	81 e8       	ldi	r24, 0x81	; 129
    1f7c:	93 e0       	ldi	r25, 0x03	; 3
    1f7e:	91 de       	rcall	.-734    	; 0x1ca2 <int_string>
    1f80:	ac 01       	movw	r20, r24
    1f82:	6a e0       	ldi	r22, 0x0A	; 10
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	5d d4       	rcall	.+2234   	; 0x2842 <lcd_str>
    1f88:	21 97       	sbiw	r28, 0x01	; 1
			count--;
    1f8a:	2f ef       	ldi	r18, 0xFF	; 255
    1f8c:	8f ef       	ldi	r24, 0xFF	; 255
    1f8e:	9c e2       	ldi	r25, 0x2C	; 44
    1f90:	21 50       	subi	r18, 0x01	; 1
    1f92:	80 40       	sbci	r24, 0x00	; 0
    1f94:	90 40       	sbci	r25, 0x00	; 0
    1f96:	e1 f7       	brne	.-8      	; 0x1f90 <game_start+0x294>
    1f98:	00 c0       	rjmp	.+0      	; 0x1f9a <game_start+0x29e>
    1f9a:	00 00       	nop
    1f9c:	d9 d3       	rcall	.+1970   	; 0x2750 <lcd_clear>
			_delay_ms(1000);
			lcd_clear();
    1f9e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <level>
			if(input_cnt>=level+3)break; //정답 입력이 완료 되었다면 반복문 탈출
    1fa2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <level+0x1>
    1fa6:	03 96       	adiw	r24, 0x03	; 3
    1fa8:	20 91 5e 04 	lds	r18, 0x045E	; 0x80045e <input_cnt>
    1fac:	30 91 5f 04 	lds	r19, 0x045F	; 0x80045f <input_cnt+0x1>
    1fb0:	28 17       	cp	r18, r24
    1fb2:	39 07       	cpc	r19, r25
    1fb4:	1c f4       	brge	.+6      	; 0x1fbc <game_start+0x2c0>
    1fb6:	1c 16       	cp	r1, r28
    1fb8:	1d 06       	cpc	r1, r29
		lcd_clear();
		
		int count = 10; //기본 시간 10초
		int success = 1; //성공 여부 확인
		
		while(count>0) //10초 동안 알맞은 순서로 입력해야 한다
    1fba:	ac f2       	brlt	.-86     	; 0x1f66 <game_start+0x26a>
    1fbc:	f8 94       	cli
    1fbe:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <level>
			lcd_clear();
			if(input_cnt>=level+3)break; //정답 입력이 완료 되었다면 반복문 탈출
		}
		cli(); //입력 비활성화
		
		if(input_cnt < level+3)success=0; //입력시간 내에 정답을 입력하지 못함
    1fc2:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <level+0x1>
    1fc6:	6d 5f       	subi	r22, 0xFD	; 253
    1fc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fca:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <input_cnt>
    1fce:	90 91 5f 04 	lds	r25, 0x045F	; 0x80045f <input_cnt+0x1>
    1fd2:	86 17       	cp	r24, r22
    1fd4:	97 07       	cpc	r25, r23
    1fd6:	1c f0       	brlt	.+6      	; 0x1fde <game_start+0x2e2>
    1fd8:	c1 e0       	ldi	r28, 0x01	; 1
    1fda:	d0 e0       	ldi	r29, 0x00	; 0
		sei(); //활성화
		_delay_ms(1000);
		lcd_clear();
		
		int count = 10; //기본 시간 10초
		int success = 1; //성공 여부 확인
    1fdc:	02 c0       	rjmp	.+4      	; 0x1fe2 <game_start+0x2e6>
    1fde:	c0 e0       	ldi	r28, 0x00	; 0
    1fe0:	d0 e0       	ldi	r29, 0x00	; 0
			lcd_clear();
			if(input_cnt>=level+3)break; //정답 입력이 완료 되었다면 반복문 탈출
		}
		cli(); //입력 비활성화
		
		if(input_cnt < level+3)success=0; //입력시간 내에 정답을 입력하지 못함
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
		
		for(int i = 0; i < level+3; i++) //입력과 정답을 비교한다
		{
			if(input[i] != answer[i])success=0;
    1fe6:	14 c0       	rjmp	.+40     	; 0x2010 <game_start+0x314>
    1fe8:	c9 01       	movw	r24, r18
    1fea:	88 0f       	add	r24, r24
    1fec:	99 1f       	adc	r25, r25
    1fee:	fc 01       	movw	r30, r24
    1ff0:	e4 59       	subi	r30, 0x94	; 148
    1ff2:	fb 4f       	sbci	r31, 0xFB	; 251
    1ff4:	40 81       	ld	r20, Z
    1ff6:	51 81       	ldd	r21, Z+1	; 0x01
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	ec 56       	subi	r30, 0x6C	; 108
    1ffc:	fb 4f       	sbci	r31, 0xFB	; 251
    1ffe:	80 81       	ld	r24, Z
    2000:	91 81       	ldd	r25, Z+1	; 0x01
    2002:	48 17       	cp	r20, r24
    2004:	59 07       	cpc	r21, r25
    2006:	11 f0       	breq	.+4      	; 0x200c <game_start+0x310>
    2008:	c0 e0       	ldi	r28, 0x00	; 0
    200a:	d0 e0       	ldi	r29, 0x00	; 0
		}
		cli(); //입력 비활성화
		
		if(input_cnt < level+3)success=0; //입력시간 내에 정답을 입력하지 못함
		
		for(int i = 0; i < level+3; i++) //입력과 정답을 비교한다
    200c:	2f 5f       	subi	r18, 0xFF	; 255
    200e:	3f 4f       	sbci	r19, 0xFF	; 255
    2010:	26 17       	cp	r18, r22
    2012:	37 07       	cpc	r19, r23
    2014:	4c f3       	brlt	.-46     	; 0x1fe8 <game_start+0x2ec>
    2016:	2f ef       	ldi	r18, 0xFF	; 255
    2018:	8f e3       	ldi	r24, 0x3F	; 63
    201a:	92 e0       	ldi	r25, 0x02	; 2
    201c:	21 50       	subi	r18, 0x01	; 1
    201e:	80 40       	sbci	r24, 0x00	; 0
    2020:	90 40       	sbci	r25, 0x00	; 0
    2022:	e1 f7       	brne	.-8      	; 0x201c <game_start+0x320>
		{
			if(input[i] != answer[i])success=0;
		}
		_delay_ms(50);
		lcd_clear();
    2024:	00 c0       	rjmp	.+0      	; 0x2026 <game_start+0x32a>
    2026:	00 00       	nop
		lcd_str(4,6,"DEBUG"); //아래의 성공/실패 메시지가 나올 수 있도록 해주는 역할(LCD 출력 버퍼문제 해결) 이 메시지는 출력되지 않음
    2028:	93 d3       	rcall	.+1830   	; 0x2750 <lcd_clear>
    202a:	49 e8       	ldi	r20, 0x89	; 137
    202c:	53 e0       	ldi	r21, 0x03	; 3
    202e:	66 e0       	ldi	r22, 0x06	; 6
    2030:	84 e0       	ldi	r24, 0x04	; 4
    2032:	07 d4       	rcall	.+2062   	; 0x2842 <lcd_str>
    2034:	2f ef       	ldi	r18, 0xFF	; 255
    2036:	8f e3       	ldi	r24, 0x3F	; 63
    2038:	92 e0       	ldi	r25, 0x02	; 2
    203a:	21 50       	subi	r18, 0x01	; 1
    203c:	80 40       	sbci	r24, 0x00	; 0
    203e:	90 40       	sbci	r25, 0x00	; 0
    2040:	e1 f7       	brne	.-8      	; 0x203a <game_start+0x33e>
    2042:	00 c0       	rjmp	.+0      	; 0x2044 <game_start+0x348>
    2044:	00 00       	nop
		_delay_ms(50);
		
		if(success == 0){
    2046:	20 97       	sbiw	r28, 0x00	; 0
    2048:	09 f5       	brne	.+66     	; 0x208c <game_start+0x390>
    204a:	2f ef       	ldi	r18, 0xFF	; 255
    204c:	8f e7       	ldi	r24, 0x7F	; 127
    204e:	96 e1       	ldi	r25, 0x16	; 22
    2050:	21 50       	subi	r18, 0x01	; 1
    2052:	80 40       	sbci	r24, 0x00	; 0
    2054:	90 40       	sbci	r25, 0x00	; 0
    2056:	e1 f7       	brne	.-8      	; 0x2050 <game_start+0x354>
    2058:	00 c0       	rjmp	.+0      	; 0x205a <game_start+0x35e>
    205a:	00 00       	nop
			_delay_ms(500);
			lcd_str(4,6,"FAILED");
    205c:	4f e8       	ldi	r20, 0x8F	; 143
    205e:	53 e0       	ldi	r21, 0x03	; 3
    2060:	66 e0       	ldi	r22, 0x06	; 6
    2062:	84 e0       	ldi	r24, 0x04	; 4
    2064:	ee d3       	rcall	.+2012   	; 0x2842 <lcd_str>
			S_HELL();
    2066:	63 d2       	rcall	.+1222   	; 0x252e <S_HELL>
    2068:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <life>
			life--;
    206c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <life+0x1>
    2070:	01 97       	sbiw	r24, 0x01	; 1
    2072:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <life+0x1>
    2076:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <life>
    207a:	2f ef       	ldi	r18, 0xFF	; 255
    207c:	8f e7       	ldi	r24, 0x7F	; 127
    207e:	96 e1       	ldi	r25, 0x16	; 22
    2080:	21 50       	subi	r18, 0x01	; 1
    2082:	80 40       	sbci	r24, 0x00	; 0
    2084:	90 40       	sbci	r25, 0x00	; 0
    2086:	e1 f7       	brne	.-8      	; 0x2080 <game_start+0x384>
    2088:	00 c0       	rjmp	.+0      	; 0x208a <game_start+0x38e>
    208a:	00 00       	nop
    208c:	21 97       	sbiw	r28, 0x01	; 1
			_delay_ms(500);
		}
		
		if(success == 1){
    208e:	c1 f4       	brne	.+48     	; 0x20c0 <game_start+0x3c4>
    2090:	2f ef       	ldi	r18, 0xFF	; 255
    2092:	8f e7       	ldi	r24, 0x7F	; 127
    2094:	96 e1       	ldi	r25, 0x16	; 22
    2096:	21 50       	subi	r18, 0x01	; 1
    2098:	80 40       	sbci	r24, 0x00	; 0
    209a:	90 40       	sbci	r25, 0x00	; 0
    209c:	e1 f7       	brne	.-8      	; 0x2096 <game_start+0x39a>
    209e:	00 c0       	rjmp	.+0      	; 0x20a0 <game_start+0x3a4>
    20a0:	00 00       	nop
    20a2:	46 e9       	ldi	r20, 0x96	; 150
			_delay_ms(500);
			lcd_str(4,6,"SUCCESS");
    20a4:	53 e0       	ldi	r21, 0x03	; 3
    20a6:	66 e0       	ldi	r22, 0x06	; 6
    20a8:	84 e0       	ldi	r24, 0x04	; 4
    20aa:	cb d3       	rcall	.+1942   	; 0x2842 <lcd_str>
    20ac:	ed d1       	rcall	.+986    	; 0x2488 <S_KEYBOARD>
    20ae:	2f ef       	ldi	r18, 0xFF	; 255
			S_KEYBOARD();
    20b0:	8f e7       	ldi	r24, 0x7F	; 127
    20b2:	96 e1       	ldi	r25, 0x16	; 22
    20b4:	21 50       	subi	r18, 0x01	; 1
    20b6:	80 40       	sbci	r24, 0x00	; 0
    20b8:	90 40       	sbci	r25, 0x00	; 0
    20ba:	e1 f7       	brne	.-8      	; 0x20b4 <game_start+0x3b8>
    20bc:	00 c0       	rjmp	.+0      	; 0x20be <game_start+0x3c2>
    20be:	00 00       	nop
    20c0:	2f ef       	ldi	r18, 0xFF	; 255
    20c2:	8f ef       	ldi	r24, 0xFF	; 255
    20c4:	9c e2       	ldi	r25, 0x2C	; 44
    20c6:	21 50       	subi	r18, 0x01	; 1
    20c8:	80 40       	sbci	r24, 0x00	; 0
    20ca:	90 40       	sbci	r25, 0x00	; 0
    20cc:	e1 f7       	brne	.-8      	; 0x20c6 <game_start+0x3ca>
    20ce:	00 c0       	rjmp	.+0      	; 0x20d0 <game_start+0x3d4>
    20d0:	00 00       	nop
			_delay_ms(500);
		}
		
		_delay_ms(1000);
		if(life > 0 && level >= endlevel + diff) //레벨을 모두 클리어 했다면 게임 클리어
    20d2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <life>
    20d6:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <life+0x1>
    20da:	18 16       	cp	r1, r24
    20dc:	19 06       	cpc	r1, r25
    20de:	5c f5       	brge	.+86     	; 0x2136 <game_start+0x43a>
    20e0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <endlevel>
    20e4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <endlevel+0x1>
    20e8:	20 91 5c 04 	lds	r18, 0x045C	; 0x80045c <diff>
    20ec:	30 91 5d 04 	lds	r19, 0x045D	; 0x80045d <diff+0x1>
    20f0:	24 0f       	add	r18, r20
    20f2:	35 1f       	adc	r19, r21
    20f4:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <level>
    20f8:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <level+0x1>
		{
			lcd_clear();
    20fc:	42 17       	cp	r20, r18
    20fe:	53 07       	cpc	r21, r19
			lcd_str(4,6,"GAME CLEAR");
    2100:	d4 f0       	brlt	.+52     	; 0x2136 <game_start+0x43a>
    2102:	26 d3       	rcall	.+1612   	; 0x2750 <lcd_clear>
    2104:	4e e9       	ldi	r20, 0x9E	; 158
    2106:	53 e0       	ldi	r21, 0x03	; 3
    2108:	66 e0       	ldi	r22, 0x06	; 6
    210a:	84 e0       	ldi	r24, 0x04	; 4
			S_KEYBOARD(); //효과음 출력
    210c:	9a d3       	rcall	.+1844   	; 0x2842 <lcd_str>
    210e:	bc d1       	rcall	.+888    	; 0x2488 <S_KEYBOARD>
			clearnum++; //클리어 카운트 증가
    2110:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <__data_end>
    2114:	90 91 5b 04 	lds	r25, 0x045B	; 0x80045b <__data_end+0x1>
    2118:	01 96       	adiw	r24, 0x01	; 1
    211a:	90 93 5b 04 	sts	0x045B, r25	; 0x80045b <__data_end+0x1>
    211e:	80 93 5a 04 	sts	0x045A, r24	; 0x80045a <__data_end>
    2122:	2f ef       	ldi	r18, 0xFF	; 255
    2124:	8f ef       	ldi	r24, 0xFF	; 255
    2126:	99 e5       	ldi	r25, 0x59	; 89
    2128:	21 50       	subi	r18, 0x01	; 1
    212a:	80 40       	sbci	r24, 0x00	; 0
    212c:	90 40       	sbci	r25, 0x00	; 0
    212e:	e1 f7       	brne	.-8      	; 0x2128 <game_start+0x42c>
    2130:	00 c0       	rjmp	.+0      	; 0x2132 <game_start+0x436>
    2132:	00 00       	nop
    2134:	2f c0       	rjmp	.+94     	; 0x2194 <game_start+0x498>
			_delay_ms(2000);
			break;
		}
		
		if(life <= 0) //생명이 다했다면 게임 오버
    2136:	18 16       	cp	r1, r24
    2138:	19 06       	cpc	r1, r25
    213a:	8c f0       	brlt	.+34     	; 0x215e <game_start+0x462>
		{
			lcd_clear();
    213c:	09 d3       	rcall	.+1554   	; 0x2750 <lcd_clear>
    213e:	49 ea       	ldi	r20, 0xA9	; 169
			lcd_str(4,6,"GAME OVER");
    2140:	53 e0       	ldi	r21, 0x03	; 3
    2142:	66 e0       	ldi	r22, 0x06	; 6
    2144:	84 e0       	ldi	r24, 0x04	; 4
    2146:	7d d3       	rcall	.+1786   	; 0x2842 <lcd_str>
    2148:	f2 d1       	rcall	.+996    	; 0x252e <S_HELL>
    214a:	2f ef       	ldi	r18, 0xFF	; 255
			S_HELL(); //효과음 출력
    214c:	8f ef       	ldi	r24, 0xFF	; 255
    214e:	99 e5       	ldi	r25, 0x59	; 89
    2150:	21 50       	subi	r18, 0x01	; 1
    2152:	80 40       	sbci	r24, 0x00	; 0
    2154:	90 40       	sbci	r25, 0x00	; 0
    2156:	e1 f7       	brne	.-8      	; 0x2150 <game_start+0x454>
    2158:	00 c0       	rjmp	.+0      	; 0x215a <game_start+0x45e>
    215a:	00 00       	nop
    215c:	1b c0       	rjmp	.+54     	; 0x2194 <game_start+0x498>
    215e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <level>
    2162:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <level+0x1>
			_delay_ms(2000);
			break;
		}
		level++; //레벨 상승
    2166:	01 96       	adiw	r24, 0x01	; 1
    2168:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <level+0x1>
    216c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <level>
    2170:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <endlevel>
    2174:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <endlevel+0x1>
	
	lcd_clear();
	lcd_str(4,4,"MUSIC START!"); //MUSIC START!
	_delay_ms(2000);
	
	while(level <= endlevel + diff){ //노말 난이도 5레벨까지 하드 난이도 7레벨까지
    2178:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <diff>
    217c:	90 91 5d 04 	lds	r25, 0x045D	; 0x80045d <diff+0x1>
    2180:	82 0f       	add	r24, r18
    2182:	93 1f       	adc	r25, r19
    2184:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <level>
    2188:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <level+0x1>
    218c:	82 17       	cp	r24, r18
    218e:	93 07       	cpc	r25, r19
    2190:	0c f0       	brlt	.+2      	; 0x2194 <game_start+0x498>
    2192:	18 ce       	rjmp	.-976    	; 0x1dc4 <game_start+0xc8>
    2194:	df 91       	pop	r29
    2196:	cf 91       	pop	r28
    2198:	0f 91       	pop	r16
			break;
		}
		level++; //레벨 상승
	}//level end
	return;
}
    219a:	08 95       	ret

0000219c <difficulty>:
    219c:	d9 d2       	rcall	.+1458   	; 0x2750 <lcd_clear>
    219e:	45 ee       	ldi	r20, 0xE5	; 229
    21a0:	52 e0       	ldi	r21, 0x02	; 2

void difficulty() { //난이도 설정 화면
	lcd_clear();
	lcd_str(1,0,"BUTTON 0 : MAIN MENU");
    21a2:	60 e0       	ldi	r22, 0x00	; 0
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	4d d3       	rcall	.+1690   	; 0x2842 <lcd_str>
	lcd_str(3,0,"BUTTON 1 : NORMAL");
    21a8:	43 eb       	ldi	r20, 0xB3	; 179
    21aa:	53 e0       	ldi	r21, 0x03	; 3
    21ac:	60 e0       	ldi	r22, 0x00	; 0
    21ae:	83 e0       	ldi	r24, 0x03	; 3
    21b0:	48 d3       	rcall	.+1680   	; 0x2842 <lcd_str>
	lcd_str(5,0,"BUTTON 2 : HARD");
    21b2:	45 ec       	ldi	r20, 0xC5	; 197
    21b4:	53 e0       	ldi	r21, 0x03	; 3
    21b6:	60 e0       	ldi	r22, 0x00	; 0
    21b8:	85 e0       	ldi	r24, 0x05	; 5
    21ba:	43 d3       	rcall	.+1670   	; 0x2842 <lcd_str>
	if(clearnum >= 1)lcd_str(7,0,"BUTTON 3 : HELL"); //1회 이상 클리어하면 헬모드 진입 가능
    21bc:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <__data_end>
    21c0:	90 91 5b 04 	lds	r25, 0x045B	; 0x80045b <__data_end+0x1>
    21c4:	18 16       	cp	r1, r24
    21c6:	19 06       	cpc	r1, r25
    21c8:	2c f4       	brge	.+10     	; 0x21d4 <difficulty+0x38>
    21ca:	45 ed       	ldi	r20, 0xD5	; 213
    21cc:	53 e0       	ldi	r21, 0x03	; 3
    21ce:	60 e0       	ldi	r22, 0x00	; 0
    21d0:	87 e0       	ldi	r24, 0x07	; 7
	
	while(1) {
		S_MAIN();
    21d2:	37 d3       	rcall	.+1646   	; 0x2842 <lcd_str>
    21d4:	d5 d1       	rcall	.+938    	; 0x2580 <S_MAIN>
		if(button0 == 1){
    21d6:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <button0>
    21da:	90 91 6b 04 	lds	r25, 0x046B	; 0x80046b <button0+0x1>
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	29 f4       	brne	.+10     	; 0x21ec <difficulty+0x50>
			button0 = 0;
    21e2:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <button0+0x1>
    21e6:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <button0>
			break;
    21ea:	08 95       	ret
		}
		if(button1 == 1){
    21ec:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <button1>
    21f0:	90 91 69 04 	lds	r25, 0x0469	; 0x800469 <button1+0x1>
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	49 f4       	brne	.+18     	; 0x220a <difficulty+0x6e>
			button1 = 0;
    21f8:	10 92 69 04 	sts	0x0469, r1	; 0x800469 <button1+0x1>
    21fc:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <button1>
			diff = 0;
    2200:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <diff+0x1>
    2204:	10 92 5c 04 	sts	0x045C, r1	; 0x80045c <diff>
			break;
    2208:	08 95       	ret
		}
		if(button2 == 1){
    220a:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <button2>
    220e:	90 91 67 04 	lds	r25, 0x0467	; 0x800467 <button2+0x1>
    2212:	01 97       	sbiw	r24, 0x01	; 1
    2214:	59 f4       	brne	.+22     	; 0x222c <difficulty+0x90>
			button2 = 0;
    2216:	10 92 67 04 	sts	0x0467, r1	; 0x800467 <button2+0x1>
    221a:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <button2>
			diff = 2;
    221e:	82 e0       	ldi	r24, 0x02	; 2
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	90 93 5d 04 	sts	0x045D, r25	; 0x80045d <diff+0x1>
    2226:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <diff>
			break;
    222a:	08 95       	ret
		}
		if(button3 == 1){
    222c:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <button3>
    2230:	90 91 65 04 	lds	r25, 0x0465	; 0x800465 <button3+0x1>
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	59 f4       	brne	.+22     	; 0x224e <difficulty+0xb2>
			button3 = 0;
    2238:	10 92 65 04 	sts	0x0465, r1	; 0x800465 <button3+0x1>
    223c:	10 92 64 04 	sts	0x0464, r1	; 0x800464 <button3>
			diff = 4;
    2240:	84 e0       	ldi	r24, 0x04	; 4
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	90 93 5d 04 	sts	0x045D, r25	; 0x80045d <diff+0x1>
    2248:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <diff>
			break;
    224c:	08 95       	ret
    224e:	2f ef       	ldi	r18, 0xFF	; 255
    2250:	8f e7       	ldi	r24, 0x7F	; 127
    2252:	96 e1       	ldi	r25, 0x16	; 22
    2254:	21 50       	subi	r18, 0x01	; 1
    2256:	80 40       	sbci	r24, 0x00	; 0
    2258:	90 40       	sbci	r25, 0x00	; 0
    225a:	e1 f7       	brne	.-8      	; 0x2254 <difficulty+0xb8>
    225c:	00 c0       	rjmp	.+0      	; 0x225e <difficulty+0xc2>
    225e:	00 00       	nop
    2260:	b9 cf       	rjmp	.-142    	; 0x21d4 <difficulty+0x38>

00002262 <main_menu>:
	return;
}

void main_menu() //메인 메뉴
{
	lcd_clear();
    2262:	76 d2       	rcall	.+1260   	; 0x2750 <lcd_clear>
	GLCD_BUFCLEAR();
    2264:	18 d3       	rcall	.+1584   	; 0x2896 <GLCD_BUFCLEAR>
	init_devices();
    2266:	bb db       	rcall	.-2186   	; 0x19de <init_devices>
    2268:	45 ee       	ldi	r20, 0xE5	; 229
	
	lcd_str(1,0,"BUTTON 0 : GAME START"); //메뉴는 버튼을 이용해 선택할 수 있다
    226a:	53 e0       	ldi	r21, 0x03	; 3
    226c:	60 e0       	ldi	r22, 0x00	; 0
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	e8 d2       	rcall	.+1488   	; 0x2842 <lcd_str>
    2272:	4b ef       	ldi	r20, 0xFB	; 251
	lcd_str(3,0,"BUTTON 1 : HOWTOPLAY");
    2274:	53 e0       	ldi	r21, 0x03	; 3
    2276:	60 e0       	ldi	r22, 0x00	; 0
    2278:	83 e0       	ldi	r24, 0x03	; 3
    227a:	e3 d2       	rcall	.+1478   	; 0x2842 <lcd_str>
    227c:	40 e1       	ldi	r20, 0x10	; 16
	lcd_str(5,0,"BUTTON 2 : DIFFICULTY");
    227e:	54 e0       	ldi	r21, 0x04	; 4
    2280:	60 e0       	ldi	r22, 0x00	; 0
    2282:	85 e0       	ldi	r24, 0x05	; 5
    2284:	de d2       	rcall	.+1468   	; 0x2842 <lcd_str>
    2286:	46 e2       	ldi	r20, 0x26	; 38
	lcd_str(7,0,"BUTTON 3 : GAME EXIT");
    2288:	54 e0       	ldi	r21, 0x04	; 4
    228a:	60 e0       	ldi	r22, 0x00	; 0
    228c:	87 e0       	ldi	r24, 0x07	; 7
    228e:	d9 d2       	rcall	.+1458   	; 0x2842 <lcd_str>
    2290:	77 d1       	rcall	.+750    	; 0x2580 <S_MAIN>
    2292:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <button0>
	
	while(1) {
		S_MAIN();
    2296:	90 91 6b 04 	lds	r25, 0x046B	; 0x80046b <button0+0x1>
		if(button0 == 1 || button1 == 1 || button2 == 1) break;
    229a:	01 97       	sbiw	r24, 0x01	; 1
    229c:	31 f1       	breq	.+76     	; 0x22ea <main_menu+0x88>
    229e:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <button1>
    22a2:	90 91 69 04 	lds	r25, 0x0469	; 0x800469 <button1+0x1>
    22a6:	01 97       	sbiw	r24, 0x01	; 1
    22a8:	01 f1       	breq	.+64     	; 0x22ea <main_menu+0x88>
    22aa:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <button2>
    22ae:	90 91 67 04 	lds	r25, 0x0467	; 0x800467 <button2+0x1>
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	d1 f0       	breq	.+52     	; 0x22ea <main_menu+0x88>
    22b6:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <button3>
	    if(button3 == 1)
    22ba:	90 91 65 04 	lds	r25, 0x0465	; 0x800465 <button3+0x1>
    22be:	01 97       	sbiw	r24, 0x01	; 1
    22c0:	51 f4       	brne	.+20     	; 0x22d6 <main_menu+0x74>
    22c2:	46 d2       	rcall	.+1164   	; 0x2750 <lcd_clear>
		{
			lcd_clear();
    22c4:	e8 d2       	rcall	.+1488   	; 0x2896 <GLCD_BUFCLEAR>
			GLCD_BUFCLEAR();
    22c6:	4b e3       	ldi	r20, 0x3B	; 59
    22c8:	54 e0       	ldi	r21, 0x04	; 4
			lcd_str(4,4,"THANK YOU!"); //게임 종료 감사합니다!
    22ca:	64 e0       	ldi	r22, 0x04	; 4
    22cc:	84 e0       	ldi	r24, 0x04	; 4
    22ce:	b9 d2       	rcall	.+1394   	; 0x2842 <lcd_str>
    22d0:	80 e0       	ldi	r24, 0x00	; 0
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	cb d4       	rcall	.+2454   	; 0x2c6c <_exit>
			exit(0);
    22d6:	2f ef       	ldi	r18, 0xFF	; 255
    22d8:	8f e7       	ldi	r24, 0x7F	; 127
    22da:	96 e1       	ldi	r25, 0x16	; 22
    22dc:	21 50       	subi	r18, 0x01	; 1
    22de:	80 40       	sbci	r24, 0x00	; 0
    22e0:	90 40       	sbci	r25, 0x00	; 0
    22e2:	e1 f7       	brne	.-8      	; 0x22dc <main_menu+0x7a>
    22e4:	00 c0       	rjmp	.+0      	; 0x22e6 <main_menu+0x84>
    22e6:	00 00       	nop
    22e8:	d3 cf       	rjmp	.-90     	; 0x2290 <main_menu+0x2e>
    22ea:	32 d2       	rcall	.+1124   	; 0x2750 <lcd_clear>
    22ec:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <button0>
		}
		_delay_ms(500);
	}
	lcd_clear();
    22f0:	90 91 6b 04 	lds	r25, 0x046B	; 0x80046b <button0+0x1>
	if(button0 == 1){ //게임시작
    22f4:	01 97       	sbiw	r24, 0x01	; 1
    22f6:	d1 f4       	brne	.+52     	; 0x232c <main_menu+0xca>
    22f8:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <button0+0x1>
    22fc:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <button0>
		button0 = 0;
    2300:	fd dc       	rcall	.-1542   	; 0x1cfc <game_start>
    2302:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <button0+0x1>
		game_start();
    2306:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <button0>
		button0 = 0; //게임 완료후 플래그 초기화
    230a:	10 92 69 04 	sts	0x0469, r1	; 0x800469 <button1+0x1>
    230e:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <button1>
		button1 = 0;
    2312:	10 92 67 04 	sts	0x0467, r1	; 0x800467 <button2+0x1>
    2316:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <button2>
		button2 = 0;
    231a:	10 92 65 04 	sts	0x0465, r1	; 0x800465 <button3+0x1>
    231e:	10 92 64 04 	sts	0x0464, r1	; 0x800464 <button3>
		button3 = 0;
    2322:	10 92 61 04 	sts	0x0461, r1	; 0x800461 <gamestarted+0x1>
    2326:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <gamestarted>
		gamestarted = 0;
    232a:	08 95       	ret
    232c:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <button1>
    2330:	90 91 69 04 	lds	r25, 0x0469	; 0x800469 <button1+0x1>
	}
	else if(button1 == 1){ //게임 방법
    2334:	01 97       	sbiw	r24, 0x01	; 1
    2336:	31 f4       	brne	.+12     	; 0x2344 <main_menu+0xe2>
    2338:	10 92 69 04 	sts	0x0469, r1	; 0x800469 <button1+0x1>
    233c:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <button1>
		button1 = 0;
    2340:	bc cc       	rjmp	.-1672   	; 0x1cba <how_to_play>
    2342:	08 95       	ret
		how_to_play();
    2344:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <button2>
    2348:	90 91 67 04 	lds	r25, 0x0467	; 0x800467 <button2+0x1>
	}
	else if(button2 == 1){ //난이도 선택
    234c:	01 97       	sbiw	r24, 0x01	; 1
    234e:	29 f4       	brne	.+10     	; 0x235a <main_menu+0xf8>
    2350:	10 92 67 04 	sts	0x0467, r1	; 0x800467 <button2+0x1>
    2354:	10 92 66 04 	sts	0x0466, r1	; 0x800466 <button2>
		button2 = 0;
    2358:	21 cf       	rjmp	.-446    	; 0x219c <difficulty>
    235a:	08 95       	ret

0000235c <main>:
    235c:	40 db       	rcall	.-2432   	; 0x19de <init_devices>
		difficulty();
    235e:	f8 d1       	rcall	.+1008   	; 0x2750 <lcd_clear>
    2360:	9a d2       	rcall	.+1332   	; 0x2896 <GLCD_BUFCLEAR>
    2362:	08 e7       	ldi	r16, 0x78	; 120
   init_devices(); //cli(), Port_init(), Adc_init(), lcd_init(), sei(), inturrupt_init()
   
     lcd_clear();
     GLCD_BUFCLEAR();
	 
	 GLCD_BITMAP(title,0,0,48,120); //타이틀 화면
    2364:	20 e3       	ldi	r18, 0x30	; 48
    2366:	40 e0       	ldi	r20, 0x00	; 0
    2368:	60 e0       	ldi	r22, 0x00	; 0
    236a:	88 e9       	ldi	r24, 0x98	; 152
    236c:	96 e1       	ldi	r25, 0x16	; 22
    236e:	32 d3       	rcall	.+1636   	; 0x29d4 <GLCD_BITMAP>
    2370:	46 e4       	ldi	r20, 0x46	; 70
	 lcd_str(7,0,"< PRESS BUTTON 0 >");
    2372:	54 e0       	ldi	r21, 0x04	; 4
    2374:	60 e0       	ldi	r22, 0x00	; 0
    2376:	87 e0       	ldi	r24, 0x07	; 7
    2378:	64 d2       	rcall	.+1224   	; 0x2842 <lcd_str>
	
     while(1) {
		S_MAIN(); //메인 음악
    237a:	02 d1       	rcall	.+516    	; 0x2580 <S_MAIN>
    237c:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <button0>
        if(button0 == 1) break; //버튼0 입력시 시작 화면에서 break
    2380:	90 91 6b 04 	lds	r25, 0x046B	; 0x80046b <button0+0x1>
    2384:	01 97       	sbiw	r24, 0x01	; 1
        seed += rand()%100; //메인 화면에서 시드 값을 생성해 준다
    2386:	c1 f0       	breq	.+48     	; 0x23b8 <main+0x5c>
    2388:	d3 d3       	rcall	.+1958   	; 0x2b30 <rand>
    238a:	64 e6       	ldi	r22, 0x64	; 100
    238c:	70 e0       	ldi	r23, 0x00	; 0
    238e:	76 d3       	rcall	.+1772   	; 0x2a7c <__divmodhi4>
    2390:	20 91 62 04 	lds	r18, 0x0462	; 0x800462 <seed>
    2394:	30 91 63 04 	lds	r19, 0x0463	; 0x800463 <seed+0x1>
    2398:	82 0f       	add	r24, r18
    239a:	93 1f       	adc	r25, r19
    239c:	90 93 63 04 	sts	0x0463, r25	; 0x800463 <seed+0x1>
    23a0:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <seed>
    23a4:	2f ef       	ldi	r18, 0xFF	; 255
    23a6:	8f e3       	ldi	r24, 0x3F	; 63
    23a8:	92 e0       	ldi	r25, 0x02	; 2
    23aa:	21 50       	subi	r18, 0x01	; 1
    23ac:	80 40       	sbci	r24, 0x00	; 0
    23ae:	90 40       	sbci	r25, 0x00	; 0
    23b0:	e1 f7       	brne	.-8      	; 0x23aa <main+0x4e>
    23b2:	00 c0       	rjmp	.+0      	; 0x23b4 <main+0x58>
    23b4:	00 00       	nop
        _delay_ms(50);
     }
     button0 = 0; //버튼0 초기화
    23b6:	e1 cf       	rjmp	.-62     	; 0x237a <main+0x1e>
    23b8:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <button0+0x1>
    23bc:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <button0>
	 
	 lcd_clear();
    23c0:	c7 d1       	rcall	.+910    	; 0x2750 <lcd_clear>
	 lcd_init();
    23c2:	df d1       	rcall	.+958    	; 0x2782 <lcd_init>
    23c4:	20 e0       	ldi	r18, 0x00	; 0
	 
	 for(int i = 0; i < 20; i++){
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	13 c0       	rjmp	.+38     	; 0x23f0 <main+0x94>
    23ca:	c9 01       	movw	r24, r18
		 answer[i] = 5;
    23cc:	88 0f       	add	r24, r24
    23ce:	99 1f       	adc	r25, r25
    23d0:	fc 01       	movw	r30, r24
    23d2:	ec 56       	subi	r30, 0x6C	; 108
    23d4:	fb 4f       	sbci	r31, 0xFB	; 251
    23d6:	45 e0       	ldi	r20, 0x05	; 5
    23d8:	50 e0       	ldi	r21, 0x00	; 0
    23da:	51 83       	std	Z+1, r21	; 0x01
    23dc:	40 83       	st	Z, r20
    23de:	fc 01       	movw	r30, r24
		 input[i] = 6;
    23e0:	e4 59       	subi	r30, 0x94	; 148
    23e2:	fb 4f       	sbci	r31, 0xFB	; 251
    23e4:	46 e0       	ldi	r20, 0x06	; 6
    23e6:	50 e0       	ldi	r21, 0x00	; 0
    23e8:	51 83       	std	Z+1, r21	; 0x01
    23ea:	40 83       	st	Z, r20
     button0 = 0; //버튼0 초기화
	 
	 lcd_clear();
	 lcd_init();
	 
	 for(int i = 0; i < 20; i++){
    23ec:	2f 5f       	subi	r18, 0xFF	; 255
    23ee:	3f 4f       	sbci	r19, 0xFF	; 255
    23f0:	24 31       	cpi	r18, 0x14	; 20
    23f2:	31 05       	cpc	r19, r1
		 answer[i] = 5;
		 input[i] = 6;
	 }
	 
	 srand(seed);
    23f4:	54 f3       	brlt	.-44     	; 0x23ca <main+0x6e>
    23f6:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <seed>
    23fa:	90 91 63 04 	lds	r25, 0x0463	; 0x800463 <seed+0x1>
    23fe:	9b d3       	rcall	.+1846   	; 0x2b36 <srand>
	 
	 while(1){
		 main_menu(); //메인 메뉴 진입
    2400:	30 df       	rcall	.-416    	; 0x2262 <main_menu>
    2402:	2f ef       	ldi	r18, 0xFF	; 255
    2404:	8f e7       	ldi	r24, 0x7F	; 127
    2406:	96 e1       	ldi	r25, 0x16	; 22
    2408:	21 50       	subi	r18, 0x01	; 1
    240a:	80 40       	sbci	r24, 0x00	; 0
    240c:	90 40       	sbci	r25, 0x00	; 0
    240e:	e1 f7       	brne	.-8      	; 0x2408 <main+0xac>
    2410:	00 c0       	rjmp	.+0      	; 0x2412 <main+0xb6>
    2412:	00 00       	nop
    2414:	f5 cf       	rjmp	.-22     	; 0x2400 <main+0xa4>

00002416 <delay_us_Melody>:
#define     Buzzer_Pin      4
#define     MelOn    SETBIT(Buzzer_Port, Buzzer_Pin)
#define     MelOff   CLEARBIT(Buzzer_Port, Buzzer_Pin)

void delay_us_Melody(int data)
{	int i;	for(i=0;i<data;i++)	{		_delay_us(1);	}}
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	05 c0       	rjmp	.+10     	; 0x2426 <delay_us_Melody+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    241c:	45 e0       	ldi	r20, 0x05	; 5
    241e:	4a 95       	dec	r20
    2420:	f1 f7       	brne	.-4      	; 0x241e <delay_us_Melody+0x8>
    2422:	2f 5f       	subi	r18, 0xFF	; 255
    2424:	3f 4f       	sbci	r19, 0xFF	; 255
    2426:	28 17       	cp	r18, r24
    2428:	39 07       	cpc	r19, r25
    242a:	c4 f3       	brlt	.-16     	; 0x241c <delay_us_Melody+0x6>
    242c:	08 95       	ret

0000242e <Sound>:

void Sound(unsigned int ch, unsigned int time)
{	unsigned int tim;
    242e:	ef 92       	push	r14
    2430:	ff 92       	push	r15
    2432:	0f 93       	push	r16
    2434:	1f 93       	push	r17
    2436:	cf 93       	push	r28
    2438:	df 93       	push	r29
    243a:	8b 01       	movw	r16, r22
	tim = ch;
	tim = tim*1000 / time;
    243c:	28 ee       	ldi	r18, 0xE8	; 232
    243e:	33 e0       	ldi	r19, 0x03	; 3
    2440:	ac 01       	movw	r20, r24
    2442:	42 9f       	mul	r20, r18
    2444:	c0 01       	movw	r24, r0
    2446:	43 9f       	mul	r20, r19
    2448:	90 0d       	add	r25, r0
    244a:	52 9f       	mul	r21, r18
    244c:	90 0d       	add	r25, r0
    244e:	11 24       	eor	r1, r1
    2450:	01 d3       	rcall	.+1538   	; 0x2a54 <__udivmodhi4>
	while(tim--){		MelOn;		delay_us_Melody(time);
    2452:	0d c0       	rjmp	.+26     	; 0x246e <Sound+0x40>
    2454:	c5 e6       	ldi	r28, 0x65	; 101
    2456:	d0 e0       	ldi	r29, 0x00	; 0
    2458:	88 81       	ld	r24, Y
    245a:	80 61       	ori	r24, 0x10	; 16
    245c:	88 83       	st	Y, r24
    245e:	c8 01       	movw	r24, r16
    2460:	da df       	rcall	.-76     	; 0x2416 <delay_us_Melody>
						MelOff;		delay_us_Melody(time);
    2462:	88 81       	ld	r24, Y
    2464:	8f 7e       	andi	r24, 0xEF	; 239
    2466:	88 83       	st	Y, r24
    2468:	c8 01       	movw	r24, r16
    246a:	d5 df       	rcall	.-86     	; 0x2416 <delay_us_Melody>

void Sound(unsigned int ch, unsigned int time)
{	unsigned int tim;
	tim = ch;
	tim = tim*1000 / time;
	while(tim--){		MelOn;		delay_us_Melody(time);
    246c:	b7 01       	movw	r22, r14
    246e:	7b 01       	movw	r14, r22
    2470:	51 e0       	ldi	r21, 0x01	; 1
    2472:	e5 1a       	sub	r14, r21
    2474:	f1 08       	sbc	r15, r1
    2476:	67 2b       	or	r22, r23
    2478:	69 f7       	brne	.-38     	; 0x2454 <Sound+0x26>
						MelOff;		delay_us_Melody(time);
	}
}
    247a:	df 91       	pop	r29
    247c:	cf 91       	pop	r28
    247e:	1f 91       	pop	r17
    2480:	0f 91       	pop	r16
    2482:	ff 90       	pop	r15
    2484:	ef 90       	pop	r14
    2486:	08 95       	ret

00002488 <S_KEYBOARD>:

void S_KEYBOARD() 
{   Sound(BB,HDo);    Sound(SB,HRe);    Sound(BB,HMi);    Sound(SB,HFa);
    2488:	65 e6       	ldi	r22, 0x65	; 101
    248a:	70 e0       	ldi	r23, 0x00	; 0
    248c:	83 e2       	ldi	r24, 0x23	; 35
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	ce df       	rcall	.-100    	; 0x242e <Sound>
    2492:	6a e5       	ldi	r22, 0x5A	; 90
    2494:	70 e0       	ldi	r23, 0x00	; 0
    2496:	8e e1       	ldi	r24, 0x1E	; 30
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	c9 df       	rcall	.-110    	; 0x242e <Sound>
    249c:	60 e5       	ldi	r22, 0x50	; 80
    249e:	70 e0       	ldi	r23, 0x00	; 0
    24a0:	83 e2       	ldi	r24, 0x23	; 35
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	c4 df       	rcall	.-120    	; 0x242e <Sound>
    24a6:	6c e4       	ldi	r22, 0x4C	; 76
    24a8:	70 e0       	ldi	r23, 0x00	; 0
    24aa:	8e e1       	ldi	r24, 0x1E	; 30
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	bf df       	rcall	.-130    	; 0x242e <Sound>
	Sound(BB,HSo);    Sound(SB,HLa);    Sound(BB,HSi);    Sound(SB,hDo);
    24b0:	64 e4       	ldi	r22, 0x44	; 68
    24b2:	70 e0       	ldi	r23, 0x00	; 0
    24b4:	83 e2       	ldi	r24, 0x23	; 35
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	ba df       	rcall	.-140    	; 0x242e <Sound>
    24ba:	6d e3       	ldi	r22, 0x3D	; 61
    24bc:	70 e0       	ldi	r23, 0x00	; 0
    24be:	8e e1       	ldi	r24, 0x1E	; 30
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	b5 df       	rcall	.-150    	; 0x242e <Sound>
    24c4:	66 e3       	ldi	r22, 0x36	; 54
    24c6:	70 e0       	ldi	r23, 0x00	; 0
    24c8:	83 e2       	ldi	r24, 0x23	; 35
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	b0 df       	rcall	.-160    	; 0x242e <Sound>
    24ce:	63 e3       	ldi	r22, 0x33	; 51
    24d0:	70 e0       	ldi	r23, 0x00	; 0
    24d2:	8e e1       	ldi	r24, 0x1E	; 30
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	ab cf       	rjmp	.-170    	; 0x242e <Sound>
    24d8:	08 95       	ret

000024da <S_GUITAR>:
}
void S_GUITAR()    {    Sound(BB,BDo);    Sound(BB,BMi);    Sound(BB,BSo);    Sound(BB,HDo); } 
    24da:	68 ec       	ldi	r22, 0xC8	; 200
    24dc:	70 e0       	ldi	r23, 0x00	; 0
    24de:	83 e2       	ldi	r24, 0x23	; 35
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	a5 df       	rcall	.-182    	; 0x242e <Sound>
    24e4:	6f e9       	ldi	r22, 0x9F	; 159
    24e6:	70 e0       	ldi	r23, 0x00	; 0
    24e8:	83 e2       	ldi	r24, 0x23	; 35
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	a0 df       	rcall	.-192    	; 0x242e <Sound>
    24ee:	66 e8       	ldi	r22, 0x86	; 134
    24f0:	70 e0       	ldi	r23, 0x00	; 0
    24f2:	83 e2       	ldi	r24, 0x23	; 35
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	9b df       	rcall	.-202    	; 0x242e <Sound>
    24f8:	65 e6       	ldi	r22, 0x65	; 101
    24fa:	70 e0       	ldi	r23, 0x00	; 0
    24fc:	83 e2       	ldi	r24, 0x23	; 35
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	96 cf       	rjmp	.-212    	; 0x242e <Sound>
    2502:	08 95       	ret

00002504 <S_DRUM>:
void S_DRUM()    {    Sound(BB,HMi);    Sound(BB,HMi);    Sound(BB,HMi);	  Sound(BB,HMi); } 
    2504:	60 e5       	ldi	r22, 0x50	; 80
    2506:	70 e0       	ldi	r23, 0x00	; 0
    2508:	83 e2       	ldi	r24, 0x23	; 35
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	90 df       	rcall	.-224    	; 0x242e <Sound>
    250e:	60 e5       	ldi	r22, 0x50	; 80
    2510:	70 e0       	ldi	r23, 0x00	; 0
    2512:	83 e2       	ldi	r24, 0x23	; 35
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	8b df       	rcall	.-234    	; 0x242e <Sound>
    2518:	60 e5       	ldi	r22, 0x50	; 80
    251a:	70 e0       	ldi	r23, 0x00	; 0
    251c:	83 e2       	ldi	r24, 0x23	; 35
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	86 df       	rcall	.-244    	; 0x242e <Sound>
    2522:	60 e5       	ldi	r22, 0x50	; 80
    2524:	70 e0       	ldi	r23, 0x00	; 0
    2526:	83 e2       	ldi	r24, 0x23	; 35
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	81 cf       	rjmp	.-254    	; 0x242e <Sound>
    252c:	08 95       	ret

0000252e <S_HELL>:
void S_HELL()    {    Sound(SB,hDo);    Sound(BB,HSi);    Sound(SB,HLa);    Sound(BB,HSo); 
    252e:	63 e3       	ldi	r22, 0x33	; 51
    2530:	70 e0       	ldi	r23, 0x00	; 0
    2532:	8e e1       	ldi	r24, 0x1E	; 30
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	7b df       	rcall	.-266    	; 0x242e <Sound>
    2538:	66 e3       	ldi	r22, 0x36	; 54
    253a:	70 e0       	ldi	r23, 0x00	; 0
    253c:	83 e2       	ldi	r24, 0x23	; 35
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	76 df       	rcall	.-276    	; 0x242e <Sound>
    2542:	6d e3       	ldi	r22, 0x3D	; 61
    2544:	70 e0       	ldi	r23, 0x00	; 0
    2546:	8e e1       	ldi	r24, 0x1E	; 30
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	71 df       	rcall	.-286    	; 0x242e <Sound>
    254c:	64 e4       	ldi	r22, 0x44	; 68
    254e:	70 e0       	ldi	r23, 0x00	; 0
    2550:	83 e2       	ldi	r24, 0x23	; 35
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	6c df       	rcall	.-296    	; 0x242e <Sound>
	Sound(SB,HFa);    Sound(BB,HMi);    Sound(SB,HRe);    Sound(BB,HDo);                     }
    2556:	6c e4       	ldi	r22, 0x4C	; 76
    2558:	70 e0       	ldi	r23, 0x00	; 0
    255a:	8e e1       	ldi	r24, 0x1E	; 30
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	67 df       	rcall	.-306    	; 0x242e <Sound>
    2560:	60 e5       	ldi	r22, 0x50	; 80
    2562:	70 e0       	ldi	r23, 0x00	; 0
    2564:	83 e2       	ldi	r24, 0x23	; 35
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	62 df       	rcall	.-316    	; 0x242e <Sound>
    256a:	6a e5       	ldi	r22, 0x5A	; 90
    256c:	70 e0       	ldi	r23, 0x00	; 0
    256e:	8e e1       	ldi	r24, 0x1E	; 30
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	5d df       	rcall	.-326    	; 0x242e <Sound>
    2574:	65 e6       	ldi	r22, 0x65	; 101
    2576:	70 e0       	ldi	r23, 0x00	; 0
    2578:	83 e2       	ldi	r24, 0x23	; 35
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	58 cf       	rjmp	.-336    	; 0x242e <Sound>
    257e:	08 95       	ret

00002580 <S_MAIN>:
void S_MAIN()    {
	Sound(LB,BMi); Sound(LB,HSi); Sound(LB,BDo); Sound(LB,BRe); 
    2580:	6f e9       	ldi	r22, 0x9F	; 159
    2582:	70 e0       	ldi	r23, 0x00	; 0
    2584:	81 e4       	ldi	r24, 0x41	; 65
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	52 df       	rcall	.-348    	; 0x242e <Sound>
    258a:	66 e3       	ldi	r22, 0x36	; 54
    258c:	70 e0       	ldi	r23, 0x00	; 0
    258e:	81 e4       	ldi	r24, 0x41	; 65
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	4d df       	rcall	.-358    	; 0x242e <Sound>
    2594:	68 ec       	ldi	r22, 0xC8	; 200
    2596:	70 e0       	ldi	r23, 0x00	; 0
    2598:	81 e4       	ldi	r24, 0x41	; 65
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	48 df       	rcall	.-368    	; 0x242e <Sound>
    259e:	62 eb       	ldi	r22, 0xB2	; 178
    25a0:	70 e0       	ldi	r23, 0x00	; 0
    25a2:	81 e4       	ldi	r24, 0x41	; 65
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	43 df       	rcall	.-378    	; 0x242e <Sound>
Sound(LB,BMi);    Sound(LB,BRe);    Sound(LB,BDo);    Sound(SB,HSi);
    25a8:	6f e9       	ldi	r22, 0x9F	; 159
    25aa:	70 e0       	ldi	r23, 0x00	; 0
    25ac:	81 e4       	ldi	r24, 0x41	; 65
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	3e df       	rcall	.-388    	; 0x242e <Sound>
    25b2:	62 eb       	ldi	r22, 0xB2	; 178
    25b4:	70 e0       	ldi	r23, 0x00	; 0
    25b6:	81 e4       	ldi	r24, 0x41	; 65
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	39 df       	rcall	.-398    	; 0x242e <Sound>
    25bc:	68 ec       	ldi	r22, 0xC8	; 200
    25be:	70 e0       	ldi	r23, 0x00	; 0
    25c0:	81 e4       	ldi	r24, 0x41	; 65
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	34 df       	rcall	.-408    	; 0x242e <Sound>
    25c6:	66 e3       	ldi	r22, 0x36	; 54
    25c8:	70 e0       	ldi	r23, 0x00	; 0
    25ca:	8e e1       	ldi	r24, 0x1E	; 30
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	2f df       	rcall	.-418    	; 0x242e <Sound>
Sound(LB,HLa);    Sound(LB,HLa);    Sound(LB,BDo);    Sound(LB,BMi); Sound(LB,BRe); Sound(LB,BDo);
    25d0:	6d e3       	ldi	r22, 0x3D	; 61
    25d2:	70 e0       	ldi	r23, 0x00	; 0
    25d4:	81 e4       	ldi	r24, 0x41	; 65
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	2a df       	rcall	.-428    	; 0x242e <Sound>
    25da:	6d e3       	ldi	r22, 0x3D	; 61
    25dc:	70 e0       	ldi	r23, 0x00	; 0
    25de:	81 e4       	ldi	r24, 0x41	; 65
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	25 df       	rcall	.-438    	; 0x242e <Sound>
    25e4:	68 ec       	ldi	r22, 0xC8	; 200
    25e6:	70 e0       	ldi	r23, 0x00	; 0
    25e8:	81 e4       	ldi	r24, 0x41	; 65
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	20 df       	rcall	.-448    	; 0x242e <Sound>
    25ee:	6f e9       	ldi	r22, 0x9F	; 159
    25f0:	70 e0       	ldi	r23, 0x00	; 0
    25f2:	81 e4       	ldi	r24, 0x41	; 65
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	1b df       	rcall	.-458    	; 0x242e <Sound>
    25f8:	62 eb       	ldi	r22, 0xB2	; 178
    25fa:	70 e0       	ldi	r23, 0x00	; 0
    25fc:	81 e4       	ldi	r24, 0x41	; 65
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	16 df       	rcall	.-468    	; 0x242e <Sound>
    2602:	68 ec       	ldi	r22, 0xC8	; 200
    2604:	70 e0       	ldi	r23, 0x00	; 0
    2606:	81 e4       	ldi	r24, 0x41	; 65
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	11 cf       	rjmp	.-478    	; 0x242e <Sound>
    260c:	08 95       	ret

0000260e <S_SOUND>:
    260e:	64 e4       	ldi	r22, 0x44	; 68
    }
void S_SOUND()    {    Sound(BB,HSo);    Sound(BB,HDo);    } 
    2610:	70 e0       	ldi	r23, 0x00	; 0
    2612:	83 e2       	ldi	r24, 0x23	; 35
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	0b df       	rcall	.-490    	; 0x242e <Sound>
    2618:	65 e6       	ldi	r22, 0x65	; 101
    261a:	70 e0       	ldi	r23, 0x00	; 0
    261c:	83 e2       	ldi	r24, 0x23	; 35
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	06 cf       	rjmp	.-500    	; 0x242e <Sound>
    2622:	08 95       	ret

00002624 <cmndl>:
			for( j = start_y ; j < yy ; j++)
			{
				ScreenBuffer[i][j] = 0x00;
			}
		}
	}
    2624:	93 b1       	in	r25, 0x03	; 3
    2626:	90 62       	ori	r25, 0x20	; 32
    2628:	93 b9       	out	0x03, r25	; 3
    262a:	91 e3       	ldi	r25, 0x31	; 49
    262c:	9a 95       	dec	r25
    262e:	f1 f7       	brne	.-4      	; 0x262c <cmndl+0x8>
    2630:	00 00       	nop
    2632:	93 b1       	in	r25, 0x03	; 3
    2634:	9f 7e       	andi	r25, 0xEF	; 239
    2636:	93 b9       	out	0x03, r25	; 3
    2638:	93 b1       	in	r25, 0x03	; 3
    263a:	9f 7b       	andi	r25, 0xBF	; 191
    263c:	93 b9       	out	0x03, r25	; 3
    263e:	93 b1       	in	r25, 0x03	; 3
    2640:	90 68       	ori	r25, 0x80	; 128
    2642:	93 b9       	out	0x03, r25	; 3
    2644:	8b bb       	out	0x1b, r24	; 27
    2646:	81 e3       	ldi	r24, 0x31	; 49
    2648:	8a 95       	dec	r24
    264a:	f1 f7       	brne	.-4      	; 0x2648 <cmndl+0x24>
    264c:	00 00       	nop
    264e:	83 b1       	in	r24, 0x03	; 3
    2650:	8f 7d       	andi	r24, 0xDF	; 223
    2652:	83 b9       	out	0x03, r24	; 3
    2654:	08 95       	ret

00002656 <cmndr>:
    2656:	93 b1       	in	r25, 0x03	; 3
    2658:	90 62       	ori	r25, 0x20	; 32
    265a:	93 b9       	out	0x03, r25	; 3
    265c:	91 e3       	ldi	r25, 0x31	; 49
    265e:	9a 95       	dec	r25
    2660:	f1 f7       	brne	.-4      	; 0x265e <cmndr+0x8>
    2662:	00 00       	nop
    2664:	93 b1       	in	r25, 0x03	; 3
    2666:	9f 7e       	andi	r25, 0xEF	; 239
    2668:	93 b9       	out	0x03, r25	; 3
    266a:	93 b1       	in	r25, 0x03	; 3
    266c:	90 64       	ori	r25, 0x40	; 64
    266e:	93 b9       	out	0x03, r25	; 3
    2670:	93 b1       	in	r25, 0x03	; 3
    2672:	9f 77       	andi	r25, 0x7F	; 127
    2674:	93 b9       	out	0x03, r25	; 3
    2676:	8b bb       	out	0x1b, r24	; 27
    2678:	81 e3       	ldi	r24, 0x31	; 49
    267a:	8a 95       	dec	r24
    267c:	f1 f7       	brne	.-4      	; 0x267a <cmndr+0x24>
    267e:	00 00       	nop
    2680:	83 b1       	in	r24, 0x03	; 3
    2682:	8f 7d       	andi	r24, 0xDF	; 223
    2684:	83 b9       	out	0x03, r24	; 3
    2686:	08 95       	ret

00002688 <cmnda>:
    2688:	93 b1       	in	r25, 0x03	; 3
    268a:	90 62       	ori	r25, 0x20	; 32
    268c:	93 b9       	out	0x03, r25	; 3
    268e:	91 e3       	ldi	r25, 0x31	; 49
    2690:	9a 95       	dec	r25
    2692:	f1 f7       	brne	.-4      	; 0x2690 <cmnda+0x8>
    2694:	00 00       	nop
    2696:	93 b1       	in	r25, 0x03	; 3
    2698:	9f 7e       	andi	r25, 0xEF	; 239
    269a:	93 b9       	out	0x03, r25	; 3
    269c:	93 b1       	in	r25, 0x03	; 3
    269e:	90 64       	ori	r25, 0x40	; 64
    26a0:	93 b9       	out	0x03, r25	; 3
    26a2:	93 b1       	in	r25, 0x03	; 3
    26a4:	90 68       	ori	r25, 0x80	; 128
    26a6:	93 b9       	out	0x03, r25	; 3
    26a8:	8b bb       	out	0x1b, r24	; 27
    26aa:	81 e3       	ldi	r24, 0x31	; 49
    26ac:	8a 95       	dec	r24
    26ae:	f1 f7       	brne	.-4      	; 0x26ac <cmnda+0x24>
    26b0:	00 00       	nop
    26b2:	83 b1       	in	r24, 0x03	; 3
    26b4:	8f 7d       	andi	r24, 0xDF	; 223
    26b6:	83 b9       	out	0x03, r24	; 3
    26b8:	08 95       	ret

000026ba <datal>:
    26ba:	93 b1       	in	r25, 0x03	; 3
    26bc:	90 62       	ori	r25, 0x20	; 32
    26be:	93 b9       	out	0x03, r25	; 3
    26c0:	91 e3       	ldi	r25, 0x31	; 49
    26c2:	9a 95       	dec	r25
    26c4:	f1 f7       	brne	.-4      	; 0x26c2 <datal+0x8>
    26c6:	00 00       	nop
    26c8:	93 b1       	in	r25, 0x03	; 3
    26ca:	90 61       	ori	r25, 0x10	; 16
    26cc:	93 b9       	out	0x03, r25	; 3
    26ce:	93 b1       	in	r25, 0x03	; 3
    26d0:	9f 7b       	andi	r25, 0xBF	; 191
    26d2:	93 b9       	out	0x03, r25	; 3
    26d4:	93 b1       	in	r25, 0x03	; 3
    26d6:	90 68       	ori	r25, 0x80	; 128
    26d8:	93 b9       	out	0x03, r25	; 3
    26da:	8b bb       	out	0x1b, r24	; 27
    26dc:	81 e3       	ldi	r24, 0x31	; 49
    26de:	8a 95       	dec	r24
    26e0:	f1 f7       	brne	.-4      	; 0x26de <datal+0x24>
    26e2:	00 00       	nop
    26e4:	83 b1       	in	r24, 0x03	; 3
    26e6:	8f 7d       	andi	r24, 0xDF	; 223
    26e8:	83 b9       	out	0x03, r24	; 3
    26ea:	08 95       	ret

000026ec <datar>:
    26ec:	93 b1       	in	r25, 0x03	; 3
    26ee:	90 62       	ori	r25, 0x20	; 32
    26f0:	93 b9       	out	0x03, r25	; 3
    26f2:	91 e3       	ldi	r25, 0x31	; 49
    26f4:	9a 95       	dec	r25
    26f6:	f1 f7       	brne	.-4      	; 0x26f4 <datar+0x8>
    26f8:	00 00       	nop
    26fa:	93 b1       	in	r25, 0x03	; 3
    26fc:	90 61       	ori	r25, 0x10	; 16
    26fe:	93 b9       	out	0x03, r25	; 3
    2700:	93 b1       	in	r25, 0x03	; 3
    2702:	90 64       	ori	r25, 0x40	; 64
    2704:	93 b9       	out	0x03, r25	; 3
    2706:	93 b1       	in	r25, 0x03	; 3
    2708:	9f 77       	andi	r25, 0x7F	; 127
    270a:	93 b9       	out	0x03, r25	; 3
    270c:	8b bb       	out	0x1b, r24	; 27
    270e:	81 e3       	ldi	r24, 0x31	; 49
    2710:	8a 95       	dec	r24
    2712:	f1 f7       	brne	.-4      	; 0x2710 <datar+0x24>
    2714:	00 00       	nop
    2716:	83 b1       	in	r24, 0x03	; 3
    2718:	8f 7d       	andi	r24, 0xDF	; 223
    271a:	83 b9       	out	0x03, r24	; 3
    271c:	08 95       	ret

0000271e <dataa>:
    271e:	93 b1       	in	r25, 0x03	; 3
    2720:	90 62       	ori	r25, 0x20	; 32
    2722:	93 b9       	out	0x03, r25	; 3
    2724:	91 e3       	ldi	r25, 0x31	; 49
    2726:	9a 95       	dec	r25
    2728:	f1 f7       	brne	.-4      	; 0x2726 <dataa+0x8>
    272a:	00 00       	nop
    272c:	93 b1       	in	r25, 0x03	; 3
    272e:	90 61       	ori	r25, 0x10	; 16
    2730:	93 b9       	out	0x03, r25	; 3
    2732:	93 b1       	in	r25, 0x03	; 3
    2734:	90 64       	ori	r25, 0x40	; 64
    2736:	93 b9       	out	0x03, r25	; 3
    2738:	93 b1       	in	r25, 0x03	; 3
    273a:	90 68       	ori	r25, 0x80	; 128
    273c:	93 b9       	out	0x03, r25	; 3
    273e:	8b bb       	out	0x1b, r24	; 27
    2740:	81 e3       	ldi	r24, 0x31	; 49
    2742:	8a 95       	dec	r24
    2744:	f1 f7       	brne	.-4      	; 0x2742 <dataa+0x24>
    2746:	00 00       	nop
    2748:	83 b1       	in	r24, 0x03	; 3
    274a:	8f 7d       	andi	r24, 0xDF	; 223
    274c:	83 b9       	out	0x03, r24	; 3
    274e:	08 95       	ret

00002750 <lcd_clear>:
    2750:	1f 93       	push	r17
    2752:	cf 93       	push	r28
    2754:	df 93       	push	r29
    2756:	18 eb       	ldi	r17, 0xB8	; 184
    2758:	d0 e0       	ldi	r29, 0x00	; 0
    275a:	0d c0       	rjmp	.+26     	; 0x2776 <lcd_clear+0x26>
    275c:	81 2f       	mov	r24, r17
    275e:	94 df       	rcall	.-216    	; 0x2688 <cmnda>
    2760:	80 e4       	ldi	r24, 0x40	; 64
    2762:	92 df       	rcall	.-220    	; 0x2688 <cmnda>
    2764:	c0 e0       	ldi	r28, 0x00	; 0
    2766:	03 c0       	rjmp	.+6      	; 0x276e <lcd_clear+0x1e>
    2768:	80 e0       	ldi	r24, 0x00	; 0
    276a:	d9 df       	rcall	.-78     	; 0x271e <dataa>
    276c:	cf 5f       	subi	r28, 0xFF	; 255
    276e:	c0 34       	cpi	r28, 0x40	; 64
    2770:	d8 f3       	brcs	.-10     	; 0x2768 <lcd_clear+0x18>
    2772:	1f 5f       	subi	r17, 0xFF	; 255
    2774:	df 5f       	subi	r29, 0xFF	; 255
    2776:	d8 30       	cpi	r29, 0x08	; 8
    2778:	88 f3       	brcs	.-30     	; 0x275c <lcd_clear+0xc>
    277a:	df 91       	pop	r29
    277c:	cf 91       	pop	r28
    277e:	1f 91       	pop	r17
    2780:	08 95       	ret

00002782 <lcd_init>:
    2782:	8f e3       	ldi	r24, 0x3F	; 63
    2784:	81 df       	rcall	.-254    	; 0x2688 <cmnda>
    2786:	80 ec       	ldi	r24, 0xC0	; 192
    2788:	7f df       	rcall	.-258    	; 0x2688 <cmnda>
    278a:	88 eb       	ldi	r24, 0xB8	; 184
    278c:	7d df       	rcall	.-262    	; 0x2688 <cmnda>
    278e:	80 e4       	ldi	r24, 0x40	; 64
    2790:	7b cf       	rjmp	.-266    	; 0x2688 <cmnda>
    2792:	08 95       	ret

00002794 <lcd_xy>:
    2794:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <xchar>
    2798:	60 93 bf 08 	sts	0x08BF, r22	; 0x8008bf <ychar>
    279c:	88 54       	subi	r24, 0x48	; 72
    279e:	74 df       	rcall	.-280    	; 0x2688 <cmnda>
    27a0:	80 91 bf 08 	lds	r24, 0x08BF	; 0x8008bf <ychar>
    27a4:	8a 30       	cpi	r24, 0x0A	; 10
    27a6:	48 f4       	brcc	.+18     	; 0x27ba <lcd_xy+0x26>
    27a8:	98 2f       	mov	r25, r24
    27aa:	99 0f       	add	r25, r25
    27ac:	89 0f       	add	r24, r25
    27ae:	98 2f       	mov	r25, r24
    27b0:	99 0f       	add	r25, r25
    27b2:	84 e4       	ldi	r24, 0x44	; 68
    27b4:	89 0f       	add	r24, r25
    27b6:	36 cf       	rjmp	.-404    	; 0x2624 <cmndl>
    27b8:	08 95       	ret
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	0a 97       	sbiw	r24, 0x0a	; 10
    27be:	98 2f       	mov	r25, r24
    27c0:	99 0f       	add	r25, r25
    27c2:	89 0f       	add	r24, r25
    27c4:	98 2f       	mov	r25, r24
    27c6:	99 0f       	add	r25, r25
    27c8:	80 e4       	ldi	r24, 0x40	; 64
    27ca:	89 0f       	add	r24, r25
    27cc:	44 cf       	rjmp	.-376    	; 0x2656 <cmndr>
    27ce:	08 95       	ret

000027d0 <lcd_char>:
    27d0:	cf 93       	push	r28
    27d2:	df 93       	push	r29
    27d4:	d8 2f       	mov	r29, r24
    27d6:	c0 e0       	ldi	r28, 0x00	; 0
    27d8:	26 c0       	rjmp	.+76     	; 0x2826 <lcd_char+0x56>
    27da:	80 91 bf 08 	lds	r24, 0x08BF	; 0x8008bf <ychar>
    27de:	8a 30       	cpi	r24, 0x0A	; 10
    27e0:	88 f4       	brcc	.+34     	; 0x2804 <lcd_char+0x34>
    27e2:	8d 2f       	mov	r24, r29
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	80 97       	sbiw	r24, 0x20	; 32
    27e8:	fc 01       	movw	r30, r24
    27ea:	ee 0f       	add	r30, r30
    27ec:	ff 1f       	adc	r31, r31
    27ee:	ee 0f       	add	r30, r30
    27f0:	ff 1f       	adc	r31, r31
    27f2:	e8 0f       	add	r30, r24
    27f4:	f9 1f       	adc	r31, r25
    27f6:	e6 5f       	subi	r30, 0xF6	; 246
    27f8:	fe 4f       	sbci	r31, 0xFE	; 254
    27fa:	ec 0f       	add	r30, r28
    27fc:	f1 1d       	adc	r31, r1
    27fe:	80 81       	ld	r24, Z
    2800:	5c df       	rcall	.-328    	; 0x26ba <datal>
    2802:	10 c0       	rjmp	.+32     	; 0x2824 <lcd_char+0x54>
    2804:	8d 2f       	mov	r24, r29
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	80 97       	sbiw	r24, 0x20	; 32
    280a:	fc 01       	movw	r30, r24
    280c:	ee 0f       	add	r30, r30
    280e:	ff 1f       	adc	r31, r31
    2810:	ee 0f       	add	r30, r30
    2812:	ff 1f       	adc	r31, r31
    2814:	e8 0f       	add	r30, r24
    2816:	f9 1f       	adc	r31, r25
    2818:	e6 5f       	subi	r30, 0xF6	; 246
    281a:	fe 4f       	sbci	r31, 0xFE	; 254
    281c:	ec 0f       	add	r30, r28
    281e:	f1 1d       	adc	r31, r1
    2820:	80 81       	ld	r24, Z
    2822:	64 df       	rcall	.-312    	; 0x26ec <datar>
    2824:	cf 5f       	subi	r28, 0xFF	; 255
    2826:	c5 30       	cpi	r28, 0x05	; 5
    2828:	c0 f2       	brcs	.-80     	; 0x27da <lcd_char+0xa>
    282a:	80 91 bf 08 	lds	r24, 0x08BF	; 0x8008bf <ychar>
    282e:	8a 30       	cpi	r24, 0x0A	; 10
    2830:	18 f4       	brcc	.+6      	; 0x2838 <lcd_char+0x68>
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	42 df       	rcall	.-380    	; 0x26ba <datal>
    2836:	02 c0       	rjmp	.+4      	; 0x283c <lcd_char+0x6c>
    2838:	80 e0       	ldi	r24, 0x00	; 0
    283a:	58 df       	rcall	.-336    	; 0x26ec <datar>
    283c:	df 91       	pop	r29
    283e:	cf 91       	pop	r28
    2840:	08 95       	ret

00002842 <lcd_str>:
    2842:	cf 93       	push	r28
    2844:	df 93       	push	r29
    2846:	ea 01       	movw	r28, r20
    2848:	80 93 bc 04 	sts	0x04BC, r24	; 0x8004bc <xchar>
    284c:	60 93 bf 08 	sts	0x08BF, r22	; 0x8008bf <ychar>
    2850:	a1 df       	rcall	.-190    	; 0x2794 <lcd_xy>
    2852:	0d c0       	rjmp	.+26     	; 0x286e <lcd_str+0x2c>
    2854:	80 91 bf 08 	lds	r24, 0x08BF	; 0x8008bf <ychar>
    2858:	8a 30       	cpi	r24, 0x0A	; 10
    285a:	11 f4       	brne	.+4      	; 0x2860 <lcd_str+0x1e>
    285c:	80 e4       	ldi	r24, 0x40	; 64
    285e:	fb de       	rcall	.-522    	; 0x2656 <cmndr>
    2860:	89 91       	ld	r24, Y+
    2862:	b6 df       	rcall	.-148    	; 0x27d0 <lcd_char>
    2864:	80 91 bf 08 	lds	r24, 0x08BF	; 0x8008bf <ychar>
    2868:	8f 5f       	subi	r24, 0xFF	; 255
    286a:	80 93 bf 08 	sts	0x08BF, r24	; 0x8008bf <ychar>
    286e:	88 81       	ld	r24, Y
    2870:	81 11       	cpse	r24, r1
    2872:	f0 cf       	rjmp	.-32     	; 0x2854 <lcd_str+0x12>
    2874:	df 91       	pop	r29
    2876:	cf 91       	pop	r28
    2878:	08 95       	ret

0000287a <GLCD_XY>:
    287a:	cf 93       	push	r28
    287c:	c6 2f       	mov	r28, r22
    287e:	88 54       	subi	r24, 0x48	; 72
    2880:	03 df       	rcall	.-506    	; 0x2688 <cmnda>
    2882:	c0 34       	cpi	r28, 0x40	; 64
    2884:	20 f4       	brcc	.+8      	; 0x288e <GLCD_XY+0x14>
    2886:	80 e4       	ldi	r24, 0x40	; 64
    2888:	8c 0f       	add	r24, r28
    288a:	cc de       	rcall	.-616    	; 0x2624 <cmndl>
    288c:	02 c0       	rjmp	.+4      	; 0x2892 <GLCD_XY+0x18>
    288e:	8c 2f       	mov	r24, r28
    2890:	e2 de       	rcall	.-572    	; 0x2656 <cmndr>
    2892:	cf 91       	pop	r28
    2894:	08 95       	ret

00002896 <GLCD_BUFCLEAR>:
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	0f c0       	rjmp	.+30     	; 0x28b8 <GLCD_BUFCLEAR+0x22>
    289a:	20 e8       	ldi	r18, 0x80	; 128
    289c:	92 9f       	mul	r25, r18
    289e:	f0 01       	movw	r30, r0
    28a0:	11 24       	eor	r1, r1
    28a2:	e1 54       	subi	r30, 0x41	; 65
    28a4:	fb 4f       	sbci	r31, 0xFB	; 251
    28a6:	e8 0f       	add	r30, r24
    28a8:	f1 1d       	adc	r31, r1
    28aa:	10 82       	st	Z, r1
    28ac:	8f 5f       	subi	r24, 0xFF	; 255
    28ae:	01 c0       	rjmp	.+2      	; 0x28b2 <GLCD_BUFCLEAR+0x1c>
    28b0:	80 e0       	ldi	r24, 0x00	; 0
    28b2:	88 23       	and	r24, r24
    28b4:	94 f7       	brge	.-28     	; 0x289a <GLCD_BUFCLEAR+0x4>
    28b6:	9f 5f       	subi	r25, 0xFF	; 255
    28b8:	98 30       	cpi	r25, 0x08	; 8
    28ba:	d0 f3       	brcs	.-12     	; 0x28b0 <GLCD_BUFCLEAR+0x1a>
    28bc:	08 95       	ret

000028be <GLCD_NUM>:

	// display 1-digit decimal number
	// 1자리의 10진수 값을 표시
	unsigned char GLCD_NUM(unsigned char number, unsigned char flag)
	{
		number %= 10;               // 10^0
    28be:	9d ec       	ldi	r25, 0xCD	; 205
    28c0:	89 9f       	mul	r24, r25
    28c2:	91 2d       	mov	r25, r1
    28c4:	11 24       	eor	r1, r1
    28c6:	96 95       	lsr	r25
    28c8:	96 95       	lsr	r25
    28ca:	96 95       	lsr	r25
    28cc:	99 0f       	add	r25, r25
    28ce:	29 2f       	mov	r18, r25
    28d0:	22 0f       	add	r18, r18
    28d2:	22 0f       	add	r18, r18
    28d4:	92 0f       	add	r25, r18
    28d6:	89 1b       	sub	r24, r25
    28d8:	98 2f       	mov	r25, r24
		
		if ((number == 0) && (flag == 0))
    28da:	31 f4       	brne	.+12     	; 0x28e8 <GLCD_NUM+0x2a>
    28dc:	61 11       	cpse	r22, r1
    28de:	04 c0       	rjmp	.+8      	; 0x28e8 <GLCD_NUM+0x2a>
		{
			lcd_char(' ');
    28e0:	80 e2       	ldi	r24, 0x20	; 32
    28e2:	76 df       	rcall	.-276    	; 0x27d0 <lcd_char>
			return 0;
    28e4:	80 e0       	ldi	r24, 0x00	; 0
    28e6:	08 95       	ret
		}
		
		lcd_char(number + '0');
    28e8:	80 e3       	ldi	r24, 0x30	; 48
    28ea:	89 0f       	add	r24, r25
    28ec:	71 df       	rcall	.-286    	; 0x27d0 <lcd_char>
		return 1;
    28ee:	81 e0       	ldi	r24, 0x01	; 1
	}
    28f0:	08 95       	ret

000028f2 <getAbit>:

	int getAbit(unsigned char X, int n) { //char(byte)의 각 bit값을 리턴해준다 ( 0 or 1)
		return ( X & (1<<n) ) >> n;
    28f2:	21 e0       	ldi	r18, 0x01	; 1
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	06 2e       	mov	r0, r22
    28f8:	02 c0       	rjmp	.+4      	; 0x28fe <getAbit+0xc>
    28fa:	22 0f       	add	r18, r18
    28fc:	33 1f       	adc	r19, r19
    28fe:	0a 94       	dec	r0
    2900:	e2 f7       	brpl	.-8      	; 0x28fa <getAbit+0x8>
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	82 23       	and	r24, r18
    2906:	93 23       	and	r25, r19
	}
    2908:	02 c0       	rjmp	.+4      	; 0x290e <getAbit+0x1c>
    290a:	95 95       	asr	r25
    290c:	87 95       	ror	r24
    290e:	6a 95       	dec	r22
    2910:	e2 f7       	brpl	.-8      	; 0x290a <getAbit+0x18>
    2912:	08 95       	ret

00002914 <GLCD_Draw>:

	void GLCD_Draw(unsigned char xx,unsigned char y, int k)
	{
    2914:	cf 93       	push	r28
    2916:	df 93       	push	r29
		unsigned char x, i;

		
		// 해상도 범위(128.64) 인지 검사
		if((xx > 63) || (y > 127)) return;
    2918:	80 34       	cpi	r24, 0x40	; 64
    291a:	08 f0       	brcs	.+2      	; 0x291e <GLCD_Draw+0xa>
    291c:	58 c0       	rjmp	.+176    	; 0x29ce <GLCD_Draw+0xba>
    291e:	66 23       	and	r22, r22
    2920:	0c f4       	brge	.+2      	; 0x2924 <GLCD_Draw+0x10>
    2922:	55 c0       	rjmp	.+170    	; 0x29ce <GLCD_Draw+0xba>
		x = xx / 8;                 // x 주소 계산
    2924:	d8 2f       	mov	r29, r24
    2926:	d6 95       	lsr	r29
    2928:	d6 95       	lsr	r29
    292a:	d6 95       	lsr	r29
		i = xx % 8;
    292c:	87 70       	andi	r24, 0x07	; 7
		if(i == 0)      { i = 0x01; }
    292e:	71 f0       	breq	.+28     	; 0x294c <GLCD_Draw+0x38>
		else if(i == 1) { i = 0x02; }
    2930:	81 30       	cpi	r24, 0x01	; 1
    2932:	71 f0       	breq	.+28     	; 0x2950 <GLCD_Draw+0x3c>
		else if(i == 2) { i = 0x04; }
    2934:	82 30       	cpi	r24, 0x02	; 2
    2936:	71 f0       	breq	.+28     	; 0x2954 <GLCD_Draw+0x40>
		else if(i == 3) { i = 0x08; }
    2938:	83 30       	cpi	r24, 0x03	; 3
    293a:	71 f0       	breq	.+28     	; 0x2958 <GLCD_Draw+0x44>
		else if(i == 4) { i = 0x10; }
    293c:	84 30       	cpi	r24, 0x04	; 4
    293e:	71 f0       	breq	.+28     	; 0x295c <GLCD_Draw+0x48>
		else if(i == 5) { i = 0x20; }
    2940:	85 30       	cpi	r24, 0x05	; 5
    2942:	71 f0       	breq	.+28     	; 0x2960 <GLCD_Draw+0x4c>
		else if(i == 6) { i = 0x40; }
    2944:	86 30       	cpi	r24, 0x06	; 6
    2946:	71 f4       	brne	.+28     	; 0x2964 <GLCD_Draw+0x50>
    2948:	80 e4       	ldi	r24, 0x40	; 64
    294a:	0d c0       	rjmp	.+26     	; 0x2966 <GLCD_Draw+0x52>
		
		// 해상도 범위(128.64) 인지 검사
		if((xx > 63) || (y > 127)) return;
		x = xx / 8;                 // x 주소 계산
		i = xx % 8;
		if(i == 0)      { i = 0x01; }
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	0b c0       	rjmp	.+22     	; 0x2966 <GLCD_Draw+0x52>
		else if(i == 1) { i = 0x02; }
    2950:	82 e0       	ldi	r24, 0x02	; 2
    2952:	09 c0       	rjmp	.+18     	; 0x2966 <GLCD_Draw+0x52>
		else if(i == 2) { i = 0x04; }
    2954:	84 e0       	ldi	r24, 0x04	; 4
    2956:	07 c0       	rjmp	.+14     	; 0x2966 <GLCD_Draw+0x52>
		else if(i == 3) { i = 0x08; }
    2958:	88 e0       	ldi	r24, 0x08	; 8
    295a:	05 c0       	rjmp	.+10     	; 0x2966 <GLCD_Draw+0x52>
		else if(i == 4) { i = 0x10; }
    295c:	80 e1       	ldi	r24, 0x10	; 16
    295e:	03 c0       	rjmp	.+6      	; 0x2966 <GLCD_Draw+0x52>
		else if(i == 5) { i = 0x20; }
    2960:	80 e2       	ldi	r24, 0x20	; 32
    2962:	01 c0       	rjmp	.+2      	; 0x2966 <GLCD_Draw+0x52>
		else if(i == 6) { i = 0x40; }
		else            { i = 0x80; }
    2964:	80 e8       	ldi	r24, 0x80	; 128
		if(!k)
    2966:	45 2b       	or	r20, r21
    2968:	69 f4       	brne	.+26     	; 0x2984 <GLCD_Draw+0x70>
		{
			i ^= 0xFF;
    296a:	80 95       	com	r24
			ScreenBuffer[x][y] &= i;
    296c:	90 e8       	ldi	r25, 0x80	; 128
    296e:	d9 9f       	mul	r29, r25
    2970:	f0 01       	movw	r30, r0
    2972:	11 24       	eor	r1, r1
    2974:	e1 54       	subi	r30, 0x41	; 65
    2976:	fb 4f       	sbci	r31, 0xFB	; 251
    2978:	e6 0f       	add	r30, r22
    297a:	f1 1d       	adc	r31, r1
    297c:	90 81       	ld	r25, Z
    297e:	89 23       	and	r24, r25
    2980:	80 83       	st	Z, r24
    2982:	0b c0       	rjmp	.+22     	; 0x299a <GLCD_Draw+0x86>
		}
		else
			ScreenBuffer[x][y] |= i;
    2984:	90 e8       	ldi	r25, 0x80	; 128
    2986:	d9 9f       	mul	r29, r25
    2988:	f0 01       	movw	r30, r0
    298a:	11 24       	eor	r1, r1
    298c:	e1 54       	subi	r30, 0x41	; 65
    298e:	fb 4f       	sbci	r31, 0xFB	; 251
    2990:	e6 0f       	add	r30, r22
    2992:	f1 1d       	adc	r31, r1
    2994:	90 81       	ld	r25, Z
    2996:	89 2b       	or	r24, r25
    2998:	80 83       	st	Z, r24
    299a:	c6 2f       	mov	r28, r22
		GLCD_XY(x, y);          // draw dot on GLCD screen
    299c:	8d 2f       	mov	r24, r29
    299e:	6d df       	rcall	.-294    	; 0x287a <GLCD_XY>
		if(y <= 63) { datal(ScreenBuffer[x][y]);  }
    29a0:	c0 34       	cpi	r28, 0x40	; 64
    29a2:	58 f4       	brcc	.+22     	; 0x29ba <GLCD_Draw+0xa6>
    29a4:	80 e8       	ldi	r24, 0x80	; 128
    29a6:	d8 9f       	mul	r29, r24
    29a8:	f0 01       	movw	r30, r0
    29aa:	11 24       	eor	r1, r1
    29ac:	e1 54       	subi	r30, 0x41	; 65
    29ae:	fb 4f       	sbci	r31, 0xFB	; 251
    29b0:	ec 0f       	add	r30, r28
    29b2:	f1 1d       	adc	r31, r1
    29b4:	80 81       	ld	r24, Z
    29b6:	81 de       	rcall	.-766    	; 0x26ba <datal>
    29b8:	0a c0       	rjmp	.+20     	; 0x29ce <GLCD_Draw+0xba>
		else        { datar(ScreenBuffer[x][y]);  }
    29ba:	90 e8       	ldi	r25, 0x80	; 128
    29bc:	d9 9f       	mul	r29, r25
    29be:	f0 01       	movw	r30, r0
    29c0:	11 24       	eor	r1, r1
    29c2:	e1 54       	subi	r30, 0x41	; 65
    29c4:	fb 4f       	sbci	r31, 0xFB	; 251
    29c6:	ec 0f       	add	r30, r28
    29c8:	f1 1d       	adc	r31, r1
    29ca:	80 81       	ld	r24, Z
    29cc:	8f de       	rcall	.-738    	; 0x26ec <datar>
	}
    29ce:	df 91       	pop	r29
    29d0:	cf 91       	pop	r28
    29d2:	08 95       	ret

000029d4 <GLCD_BITMAP>:

	/* 비트맵 이미지 출력함수 */
	void GLCD_BITMAP(unsigned char *bmp,unsigned char x, unsigned char y, unsigned char dx, unsigned char dy)
	{
    29d4:	9f 92       	push	r9
    29d6:	af 92       	push	r10
    29d8:	bf 92       	push	r11
    29da:	cf 92       	push	r12
    29dc:	df 92       	push	r13
    29de:	ef 92       	push	r14
    29e0:	ff 92       	push	r15
    29e2:	0f 93       	push	r16
    29e4:	1f 93       	push	r17
    29e6:	cf 93       	push	r28
    29e8:	df 93       	push	r29
    29ea:	7c 01       	movw	r14, r24
    29ec:	a6 2e       	mov	r10, r22
    29ee:	b4 2e       	mov	r11, r20
    29f0:	92 2e       	mov	r9, r18
		unsigned char i,j;
		unsigned char *bitmap_ptr;
		int counter = 0;
    29f2:	c0 e0       	ldi	r28, 0x00	; 0
    29f4:	d0 e0       	ldi	r29, 0x00	; 0
		for(j=0; j <dx ; ++j) {
    29f6:	c1 2c       	mov	r12, r1
    29f8:	1f c0       	rjmp	.+62     	; 0x2a38 <GLCD_BITMAP+0x64>
			for(i = 0 ; i<dy ; ++i) {
				if(counter == 0) { //byte로 8비트를 읽은 뒤 새로 가져온다
    29fa:	20 97       	sbiw	r28, 0x00	; 0
    29fc:	29 f4       	brne	.+10     	; 0x2a08 <GLCD_BITMAP+0x34>
					bitmap_ptr = (unsigned char *)pgm_read_byte(bmp++); //progem 저장된 bit맵을 byte단위로 가져온다.
    29fe:	c7 01       	movw	r24, r14
    2a00:	01 96       	adiw	r24, 0x01	; 1
    2a02:	f7 01       	movw	r30, r14
    2a04:	d4 90       	lpm	r13, Z
    2a06:	7c 01       	movw	r14, r24
				}
				GLCD_Draw(x+j,y+i, getAbit(bitmap_ptr,7-counter)); //getAbit 1 -> 점 0 -> 비움
    2a08:	67 e0       	ldi	r22, 0x07	; 7
    2a0a:	70 e0       	ldi	r23, 0x00	; 0
    2a0c:	6c 1b       	sub	r22, r28
    2a0e:	7d 0b       	sbc	r23, r29
    2a10:	8d 2d       	mov	r24, r13
    2a12:	6f df       	rcall	.-290    	; 0x28f2 <getAbit>
    2a14:	ac 01       	movw	r20, r24
    2a16:	61 2f       	mov	r22, r17
    2a18:	6b 0d       	add	r22, r11
    2a1a:	8c 2d       	mov	r24, r12
    2a1c:	8a 0d       	add	r24, r10
    2a1e:	7a df       	rcall	.-268    	; 0x2914 <GLCD_Draw>
		
				++counter;
    2a20:	21 96       	adiw	r28, 0x01	; 1
				if(counter == 8) { //8bit 읽기 완료
    2a22:	c8 30       	cpi	r28, 0x08	; 8
    2a24:	d1 05       	cpc	r29, r1
    2a26:	11 f4       	brne	.+4      	; 0x2a2c <GLCD_BITMAP+0x58>
					counter = 0;
    2a28:	c0 e0       	ldi	r28, 0x00	; 0
    2a2a:	d0 e0       	ldi	r29, 0x00	; 0
	{
		unsigned char i,j;
		unsigned char *bitmap_ptr;
		int counter = 0;
		for(j=0; j <dx ; ++j) {
			for(i = 0 ; i<dy ; ++i) {
    2a2c:	1f 5f       	subi	r17, 0xFF	; 255
    2a2e:	01 c0       	rjmp	.+2      	; 0x2a32 <GLCD_BITMAP+0x5e>
    2a30:	10 e0       	ldi	r17, 0x00	; 0
    2a32:	10 17       	cp	r17, r16
    2a34:	10 f3       	brcs	.-60     	; 0x29fa <GLCD_BITMAP+0x26>
	void GLCD_BITMAP(unsigned char *bmp,unsigned char x, unsigned char y, unsigned char dx, unsigned char dy)
	{
		unsigned char i,j;
		unsigned char *bitmap_ptr;
		int counter = 0;
		for(j=0; j <dx ; ++j) {
    2a36:	c3 94       	inc	r12
    2a38:	c9 14       	cp	r12, r9
    2a3a:	d0 f3       	brcs	.-12     	; 0x2a30 <GLCD_BITMAP+0x5c>
					counter = 0;
				}
			}
		}
		
	}
    2a3c:	df 91       	pop	r29
    2a3e:	cf 91       	pop	r28
    2a40:	1f 91       	pop	r17
    2a42:	0f 91       	pop	r16
    2a44:	ff 90       	pop	r15
    2a46:	ef 90       	pop	r14
    2a48:	df 90       	pop	r13
    2a4a:	cf 90       	pop	r12
    2a4c:	bf 90       	pop	r11
    2a4e:	af 90       	pop	r10
    2a50:	9f 90       	pop	r9
    2a52:	08 95       	ret

00002a54 <__udivmodhi4>:
    2a54:	aa 1b       	sub	r26, r26
    2a56:	bb 1b       	sub	r27, r27
    2a58:	51 e1       	ldi	r21, 0x11	; 17
    2a5a:	07 c0       	rjmp	.+14     	; 0x2a6a <__udivmodhi4_ep>

00002a5c <__udivmodhi4_loop>:
    2a5c:	aa 1f       	adc	r26, r26
    2a5e:	bb 1f       	adc	r27, r27
    2a60:	a6 17       	cp	r26, r22
    2a62:	b7 07       	cpc	r27, r23
    2a64:	10 f0       	brcs	.+4      	; 0x2a6a <__udivmodhi4_ep>
    2a66:	a6 1b       	sub	r26, r22
    2a68:	b7 0b       	sbc	r27, r23

00002a6a <__udivmodhi4_ep>:
    2a6a:	88 1f       	adc	r24, r24
    2a6c:	99 1f       	adc	r25, r25
    2a6e:	5a 95       	dec	r21
    2a70:	a9 f7       	brne	.-22     	; 0x2a5c <__udivmodhi4_loop>
    2a72:	80 95       	com	r24
    2a74:	90 95       	com	r25
    2a76:	bc 01       	movw	r22, r24
    2a78:	cd 01       	movw	r24, r26
    2a7a:	08 95       	ret

00002a7c <__divmodhi4>:
    2a7c:	97 fb       	bst	r25, 7
    2a7e:	07 2e       	mov	r0, r23
    2a80:	16 f4       	brtc	.+4      	; 0x2a86 <__divmodhi4+0xa>
    2a82:	00 94       	com	r0
    2a84:	06 d0       	rcall	.+12     	; 0x2a92 <__divmodhi4_neg1>
    2a86:	77 fd       	sbrc	r23, 7
    2a88:	08 d0       	rcall	.+16     	; 0x2a9a <__divmodhi4_neg2>
    2a8a:	e4 df       	rcall	.-56     	; 0x2a54 <__udivmodhi4>
    2a8c:	07 fc       	sbrc	r0, 7
    2a8e:	05 d0       	rcall	.+10     	; 0x2a9a <__divmodhi4_neg2>
    2a90:	3e f4       	brtc	.+14     	; 0x2aa0 <__divmodhi4_exit>

00002a92 <__divmodhi4_neg1>:
    2a92:	90 95       	com	r25
    2a94:	81 95       	neg	r24
    2a96:	9f 4f       	sbci	r25, 0xFF	; 255
    2a98:	08 95       	ret

00002a9a <__divmodhi4_neg2>:
    2a9a:	70 95       	com	r23
    2a9c:	61 95       	neg	r22
    2a9e:	7f 4f       	sbci	r23, 0xFF	; 255

00002aa0 <__divmodhi4_exit>:
    2aa0:	08 95       	ret

00002aa2 <do_rand>:
    2aa2:	8f 92       	push	r8
    2aa4:	9f 92       	push	r9
    2aa6:	af 92       	push	r10
    2aa8:	bf 92       	push	r11
    2aaa:	cf 92       	push	r12
    2aac:	df 92       	push	r13
    2aae:	ef 92       	push	r14
    2ab0:	ff 92       	push	r15
    2ab2:	cf 93       	push	r28
    2ab4:	df 93       	push	r29
    2ab6:	ec 01       	movw	r28, r24
    2ab8:	68 81       	ld	r22, Y
    2aba:	79 81       	ldd	r23, Y+1	; 0x01
    2abc:	8a 81       	ldd	r24, Y+2	; 0x02
    2abe:	9b 81       	ldd	r25, Y+3	; 0x03
    2ac0:	61 15       	cp	r22, r1
    2ac2:	71 05       	cpc	r23, r1
    2ac4:	81 05       	cpc	r24, r1
    2ac6:	91 05       	cpc	r25, r1
    2ac8:	21 f4       	brne	.+8      	; 0x2ad2 <do_rand+0x30>
    2aca:	64 e2       	ldi	r22, 0x24	; 36
    2acc:	79 ed       	ldi	r23, 0xD9	; 217
    2ace:	8b e5       	ldi	r24, 0x5B	; 91
    2ad0:	97 e0       	ldi	r25, 0x07	; 7
    2ad2:	2d e1       	ldi	r18, 0x1D	; 29
    2ad4:	33 ef       	ldi	r19, 0xF3	; 243
    2ad6:	41 e0       	ldi	r20, 0x01	; 1
    2ad8:	50 e0       	ldi	r21, 0x00	; 0
    2ada:	6b d0       	rcall	.+214    	; 0x2bb2 <__divmodsi4>
    2adc:	49 01       	movw	r8, r18
    2ade:	5a 01       	movw	r10, r20
    2ae0:	9b 01       	movw	r18, r22
    2ae2:	ac 01       	movw	r20, r24
    2ae4:	a7 ea       	ldi	r26, 0xA7	; 167
    2ae6:	b1 e4       	ldi	r27, 0x41	; 65
    2ae8:	80 d0       	rcall	.+256    	; 0x2bea <__muluhisi3>
    2aea:	6b 01       	movw	r12, r22
    2aec:	7c 01       	movw	r14, r24
    2aee:	ac ee       	ldi	r26, 0xEC	; 236
    2af0:	b4 ef       	ldi	r27, 0xF4	; 244
    2af2:	a5 01       	movw	r20, r10
    2af4:	94 01       	movw	r18, r8
    2af6:	85 d0       	rcall	.+266    	; 0x2c02 <__mulohisi3>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	8c 0d       	add	r24, r12
    2afe:	9d 1d       	adc	r25, r13
    2b00:	ae 1d       	adc	r26, r14
    2b02:	bf 1d       	adc	r27, r15
    2b04:	b7 ff       	sbrs	r27, 7
    2b06:	03 c0       	rjmp	.+6      	; 0x2b0e <do_rand+0x6c>
    2b08:	01 97       	sbiw	r24, 0x01	; 1
    2b0a:	a1 09       	sbc	r26, r1
    2b0c:	b0 48       	sbci	r27, 0x80	; 128
    2b0e:	88 83       	st	Y, r24
    2b10:	99 83       	std	Y+1, r25	; 0x01
    2b12:	aa 83       	std	Y+2, r26	; 0x02
    2b14:	bb 83       	std	Y+3, r27	; 0x03
    2b16:	9f 77       	andi	r25, 0x7F	; 127
    2b18:	df 91       	pop	r29
    2b1a:	cf 91       	pop	r28
    2b1c:	ff 90       	pop	r15
    2b1e:	ef 90       	pop	r14
    2b20:	df 90       	pop	r13
    2b22:	cf 90       	pop	r12
    2b24:	bf 90       	pop	r11
    2b26:	af 90       	pop	r10
    2b28:	9f 90       	pop	r9
    2b2a:	8f 90       	pop	r8
    2b2c:	08 95       	ret

00002b2e <rand_r>:
    2b2e:	b9 cf       	rjmp	.-142    	; 0x2aa2 <do_rand>

00002b30 <rand>:
    2b30:	80 e0       	ldi	r24, 0x00	; 0
    2b32:	91 e0       	ldi	r25, 0x01	; 1
    2b34:	b6 cf       	rjmp	.-148    	; 0x2aa2 <do_rand>

00002b36 <srand>:
    2b36:	a0 e0       	ldi	r26, 0x00	; 0
    2b38:	b0 e0       	ldi	r27, 0x00	; 0
    2b3a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    2b3e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2b42:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
    2b46:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    2b4a:	08 95       	ret

00002b4c <__itoa_ncheck>:
    2b4c:	bb 27       	eor	r27, r27
    2b4e:	4a 30       	cpi	r20, 0x0A	; 10
    2b50:	31 f4       	brne	.+12     	; 0x2b5e <__itoa_ncheck+0x12>
    2b52:	99 23       	and	r25, r25
    2b54:	22 f4       	brpl	.+8      	; 0x2b5e <__itoa_ncheck+0x12>
    2b56:	bd e2       	ldi	r27, 0x2D	; 45
    2b58:	90 95       	com	r25
    2b5a:	81 95       	neg	r24
    2b5c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b5e:	01 c0       	rjmp	.+2      	; 0x2b62 <__utoa_common>

00002b60 <__utoa_ncheck>:
    2b60:	bb 27       	eor	r27, r27

00002b62 <__utoa_common>:
    2b62:	fb 01       	movw	r30, r22
    2b64:	55 27       	eor	r21, r21
    2b66:	aa 27       	eor	r26, r26
    2b68:	88 0f       	add	r24, r24
    2b6a:	99 1f       	adc	r25, r25
    2b6c:	aa 1f       	adc	r26, r26
    2b6e:	a4 17       	cp	r26, r20
    2b70:	10 f0       	brcs	.+4      	; 0x2b76 <__utoa_common+0x14>
    2b72:	a4 1b       	sub	r26, r20
    2b74:	83 95       	inc	r24
    2b76:	50 51       	subi	r21, 0x10	; 16
    2b78:	b9 f7       	brne	.-18     	; 0x2b68 <__utoa_common+0x6>
    2b7a:	a0 5d       	subi	r26, 0xD0	; 208
    2b7c:	aa 33       	cpi	r26, 0x3A	; 58
    2b7e:	08 f0       	brcs	.+2      	; 0x2b82 <__utoa_common+0x20>
    2b80:	a9 5d       	subi	r26, 0xD9	; 217
    2b82:	a1 93       	st	Z+, r26
    2b84:	00 97       	sbiw	r24, 0x00	; 0
    2b86:	79 f7       	brne	.-34     	; 0x2b66 <__utoa_common+0x4>
    2b88:	b1 11       	cpse	r27, r1
    2b8a:	b1 93       	st	Z+, r27
    2b8c:	11 92       	st	Z+, r1
    2b8e:	cb 01       	movw	r24, r22
    2b90:	00 c0       	rjmp	.+0      	; 0x2b92 <strrev>

00002b92 <strrev>:
    2b92:	dc 01       	movw	r26, r24
    2b94:	fc 01       	movw	r30, r24
    2b96:	67 2f       	mov	r22, r23
    2b98:	71 91       	ld	r23, Z+
    2b9a:	77 23       	and	r23, r23
    2b9c:	e1 f7       	brne	.-8      	; 0x2b96 <strrev+0x4>
    2b9e:	32 97       	sbiw	r30, 0x02	; 2
    2ba0:	04 c0       	rjmp	.+8      	; 0x2baa <strrev+0x18>
    2ba2:	7c 91       	ld	r23, X
    2ba4:	6d 93       	st	X+, r22
    2ba6:	70 83       	st	Z, r23
    2ba8:	62 91       	ld	r22, -Z
    2baa:	ae 17       	cp	r26, r30
    2bac:	bf 07       	cpc	r27, r31
    2bae:	c8 f3       	brcs	.-14     	; 0x2ba2 <strrev+0x10>
    2bb0:	08 95       	ret

00002bb2 <__divmodsi4>:
    2bb2:	05 2e       	mov	r0, r21
    2bb4:	97 fb       	bst	r25, 7
    2bb6:	16 f4       	brtc	.+4      	; 0x2bbc <__divmodsi4+0xa>
    2bb8:	00 94       	com	r0
    2bba:	0f d0       	rcall	.+30     	; 0x2bda <__negsi2>
    2bbc:	57 fd       	sbrc	r21, 7
    2bbe:	05 d0       	rcall	.+10     	; 0x2bca <__divmodsi4_neg2>
    2bc0:	24 d0       	rcall	.+72     	; 0x2c0a <__udivmodsi4>
    2bc2:	07 fc       	sbrc	r0, 7
    2bc4:	02 d0       	rcall	.+4      	; 0x2bca <__divmodsi4_neg2>
    2bc6:	46 f4       	brtc	.+16     	; 0x2bd8 <__divmodsi4_exit>
    2bc8:	08 c0       	rjmp	.+16     	; 0x2bda <__negsi2>

00002bca <__divmodsi4_neg2>:
    2bca:	50 95       	com	r21
    2bcc:	40 95       	com	r20
    2bce:	30 95       	com	r19
    2bd0:	21 95       	neg	r18
    2bd2:	3f 4f       	sbci	r19, 0xFF	; 255
    2bd4:	4f 4f       	sbci	r20, 0xFF	; 255
    2bd6:	5f 4f       	sbci	r21, 0xFF	; 255

00002bd8 <__divmodsi4_exit>:
    2bd8:	08 95       	ret

00002bda <__negsi2>:
    2bda:	90 95       	com	r25
    2bdc:	80 95       	com	r24
    2bde:	70 95       	com	r23
    2be0:	61 95       	neg	r22
    2be2:	7f 4f       	sbci	r23, 0xFF	; 255
    2be4:	8f 4f       	sbci	r24, 0xFF	; 255
    2be6:	9f 4f       	sbci	r25, 0xFF	; 255
    2be8:	08 95       	ret

00002bea <__muluhisi3>:
    2bea:	31 d0       	rcall	.+98     	; 0x2c4e <__umulhisi3>
    2bec:	a5 9f       	mul	r26, r21
    2bee:	90 0d       	add	r25, r0
    2bf0:	b4 9f       	mul	r27, r20
    2bf2:	90 0d       	add	r25, r0
    2bf4:	a4 9f       	mul	r26, r20
    2bf6:	80 0d       	add	r24, r0
    2bf8:	91 1d       	adc	r25, r1
    2bfa:	11 24       	eor	r1, r1
    2bfc:	08 95       	ret

00002bfe <__mulshisi3>:
    2bfe:	b7 ff       	sbrs	r27, 7
    2c00:	f4 cf       	rjmp	.-24     	; 0x2bea <__muluhisi3>

00002c02 <__mulohisi3>:
    2c02:	f3 df       	rcall	.-26     	; 0x2bea <__muluhisi3>
    2c04:	82 1b       	sub	r24, r18
    2c06:	93 0b       	sbc	r25, r19
    2c08:	08 95       	ret

00002c0a <__udivmodsi4>:
    2c0a:	a1 e2       	ldi	r26, 0x21	; 33
    2c0c:	1a 2e       	mov	r1, r26
    2c0e:	aa 1b       	sub	r26, r26
    2c10:	bb 1b       	sub	r27, r27
    2c12:	fd 01       	movw	r30, r26
    2c14:	0d c0       	rjmp	.+26     	; 0x2c30 <__udivmodsi4_ep>

00002c16 <__udivmodsi4_loop>:
    2c16:	aa 1f       	adc	r26, r26
    2c18:	bb 1f       	adc	r27, r27
    2c1a:	ee 1f       	adc	r30, r30
    2c1c:	ff 1f       	adc	r31, r31
    2c1e:	a2 17       	cp	r26, r18
    2c20:	b3 07       	cpc	r27, r19
    2c22:	e4 07       	cpc	r30, r20
    2c24:	f5 07       	cpc	r31, r21
    2c26:	20 f0       	brcs	.+8      	; 0x2c30 <__udivmodsi4_ep>
    2c28:	a2 1b       	sub	r26, r18
    2c2a:	b3 0b       	sbc	r27, r19
    2c2c:	e4 0b       	sbc	r30, r20
    2c2e:	f5 0b       	sbc	r31, r21

00002c30 <__udivmodsi4_ep>:
    2c30:	66 1f       	adc	r22, r22
    2c32:	77 1f       	adc	r23, r23
    2c34:	88 1f       	adc	r24, r24
    2c36:	99 1f       	adc	r25, r25
    2c38:	1a 94       	dec	r1
    2c3a:	69 f7       	brne	.-38     	; 0x2c16 <__udivmodsi4_loop>
    2c3c:	60 95       	com	r22
    2c3e:	70 95       	com	r23
    2c40:	80 95       	com	r24
    2c42:	90 95       	com	r25
    2c44:	9b 01       	movw	r18, r22
    2c46:	ac 01       	movw	r20, r24
    2c48:	bd 01       	movw	r22, r26
    2c4a:	cf 01       	movw	r24, r30
    2c4c:	08 95       	ret

00002c4e <__umulhisi3>:
    2c4e:	a2 9f       	mul	r26, r18
    2c50:	b0 01       	movw	r22, r0
    2c52:	b3 9f       	mul	r27, r19
    2c54:	c0 01       	movw	r24, r0
    2c56:	a3 9f       	mul	r26, r19
    2c58:	70 0d       	add	r23, r0
    2c5a:	81 1d       	adc	r24, r1
    2c5c:	11 24       	eor	r1, r1
    2c5e:	91 1d       	adc	r25, r1
    2c60:	b2 9f       	mul	r27, r18
    2c62:	70 0d       	add	r23, r0
    2c64:	81 1d       	adc	r24, r1
    2c66:	11 24       	eor	r1, r1
    2c68:	91 1d       	adc	r25, r1
    2c6a:	08 95       	ret

00002c6c <_exit>:
    2c6c:	f8 94       	cli

00002c6e <__stop_program>:
    2c6e:	ff cf       	rjmp	.-2      	; 0x2c6e <__stop_program>
